{"version":3,"file":"home.js","sources":["node_modules/prismjs/prism.js","src/home.js"],"sourcesContent":["\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\n/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t? self // if in worker\n\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self){\n\n// Private helper vars\nvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\nvar uniqueId = 0;\n\n\nvar _ = {\n\t/**\n\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t * additional languages or plugins yourself.\n\t *\n\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t *\n\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t * empty Prism object into the global scope before loading the Prism script like this:\n\t *\n\t * ```js\n\t * window.Prism = window.Prism || {};\n\t * Prism.manual = true;\n\t * // add a new <script> to load Prism's script\n\t * ```\n\t *\n\t * @default false\n\t * @type {boolean}\n\t * @memberof Prism\n\t * @public\n\t */\n\tmanual: _self.Prism && _self.Prism.manual,\n\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t/**\n\t * A namespace for utility methods.\n\t *\n\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t * change or disappear at any time.\n\t *\n\t * @namespace\n\t * @memberof Prism\n\t */\n\tutil: {\n\t\tencode: function encode(tokens) {\n\t\t\tif (tokens instanceof Token) {\n\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\treturn tokens.map(encode);\n\t\t\t} else {\n\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Returns the name of the type of the given value.\n\t\t *\n\t\t * @param {any} o\n\t\t * @returns {string}\n\t\t * @example\n\t\t * type(null)      === 'Null'\n\t\t * type(undefined) === 'Undefined'\n\t\t * type(123)       === 'Number'\n\t\t * type('foo')     === 'String'\n\t\t * type(true)      === 'Boolean'\n\t\t * type([1, 2])    === 'Array'\n\t\t * type({})        === 'Object'\n\t\t * type(String)    === 'Function'\n\t\t * type(/abc+/)    === 'RegExp'\n\t\t */\n\t\ttype: function (o) {\n\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t},\n\n\t\t/**\n\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t *\n\t\t * @param {Object} obj\n\t\t * @returns {number}\n\t\t */\n\t\tobjId: function (obj) {\n\t\t\tif (!obj['__id']) {\n\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t}\n\t\t\treturn obj['__id'];\n\t\t},\n\n\t\t/**\n\t\t * Creates a deep clone of the given object.\n\t\t *\n\t\t * The main intended use of this function is to clone language definitions.\n\t\t *\n\t\t * @param {T} o\n\t\t * @param {Record<number, any>} [visited]\n\t\t * @returns {T}\n\t\t * @template T\n\t\t */\n\t\tclone: function deepClone(o, visited) {\n\t\t\tvisited = visited || {};\n\n\t\t\tvar clone, id;\n\t\t\tswitch (_.util.type(o)) {\n\t\t\t\tcase 'Object':\n\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t}\n\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\tcase 'Array':\n\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t}\n\t\t\t\t\tclone = [];\n\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t});\n\n\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn o;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t *\n\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t *\n\t\t * @param {Element} element\n\t\t * @returns {string}\n\t\t */\n\t\tgetLanguage: function (element) {\n\t\t\twhile (element && !lang.test(element.className)) {\n\t\t\t\telement = element.parentElement;\n\t\t\t}\n\t\t\tif (element) {\n\t\t\t\treturn (element.className.match(lang) || [, 'none'])[1].toLowerCase();\n\t\t\t}\n\t\t\treturn 'none';\n\t\t},\n\n\t\t/**\n\t\t * Returns the script element that is currently executing.\n\t\t *\n\t\t * This does __not__ work for line script element.\n\t\t *\n\t\t * @returns {HTMLScriptElement | null}\n\t\t */\n\t\tcurrentScript: function () {\n\t\t\tif (typeof document === 'undefined') {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t}\n\n\t\t\t// IE11 workaround\n\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t// this will not work for inline scripts\n\n\t\t\ttry {\n\t\t\t\tthrow new Error();\n\t\t\t} catch (err) {\n\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t// A stack will look like this:\n\t\t\t\t//\n\t\t\t\t// Error\n\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):.+:.+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\tif (src) {\n\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Returns whether a given class is active for `element`.\n\t\t *\n\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t * given class is just the given class with a `no-` prefix.\n\t\t *\n\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t *\n\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t * version of it, the class is considered active.\n\t\t *\n\t\t * @param {Element} element\n\t\t * @param {string} className\n\t\t * @param {boolean} [defaultActivation=false]\n\t\t * @returns {boolean}\n\t\t */\n\t\tisActive: function (element, className, defaultActivation) {\n\t\t\tvar no = 'no-' + className;\n\n\t\t\twhile (element) {\n\t\t\t\tvar classList = element.classList;\n\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telement = element.parentElement;\n\t\t\t}\n\t\t\treturn !!defaultActivation;\n\t\t}\n\t},\n\n\t/**\n\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t *\n\t * @namespace\n\t * @memberof Prism\n\t * @public\n\t */\n\tlanguages: {\n\t\t/**\n\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t *\n\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t * will be overwritten at its original position.\n\t\t *\n\t\t * ## Best practices\n\t\t *\n\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t *\n\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t *\n\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t * @param {Grammar} redef The new tokens to append.\n\t\t * @returns {Grammar} The new language created.\n\t\t * @public\n\t\t * @example\n\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t *     // at its original position\n\t\t *     'comment': { ... },\n\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t * });\n\t\t */\n\t\textend: function (id, redef) {\n\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\tfor (var key in redef) {\n\t\t\t\tlang[key] = redef[key];\n\t\t\t}\n\n\t\t\treturn lang;\n\t\t},\n\n\t\t/**\n\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t *\n\t\t * ## Usage\n\t\t *\n\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t * this:\n\t\t *\n\t\t * ```js\n\t\t * Prism.languages.markup.style = {\n\t\t *     // token\n\t\t * };\n\t\t * ```\n\t\t *\n\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t *\n\t\t * ```js\n\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t *     'style': {\n\t\t *         // token\n\t\t *     }\n\t\t * });\n\t\t * ```\n\t\t *\n\t\t * ## Special cases\n\t\t *\n\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t * will be ignored.\n\t\t *\n\t\t * This behavior can be used to insert tokens after `before`:\n\t\t *\n\t\t * ```js\n\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t *     'comment': Prism.languages.markup.comment,\n\t\t *     // tokens after 'comment'\n\t\t * });\n\t\t * ```\n\t\t *\n\t\t * ## Limitations\n\t\t *\n\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t *\n\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t *\n\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t *\n\t\t * ```js\n\t\t * var oldMarkup = Prism.languages.markup;\n\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t *\n\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t * ```\n\t\t *\n\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t * object to be modified.\n\t\t * @param {string} before The key to insert before.\n\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t * object to be modified.\n\t\t *\n\t\t * Defaults to `Prism.languages`.\n\t\t * @returns {Grammar} The new grammar object.\n\t\t * @public\n\t\t */\n\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\tvar grammar = root[inside];\n\t\t\t/** @type {Grammar} */\n\t\t\tvar ret = {};\n\n\t\t\tfor (var token in grammar) {\n\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar old = root[inside];\n\t\t\troot[inside] = ret;\n\n\t\t\t// Update references in other language definitions\n\t\t\t_.languages.DFS(_.languages, function(key, value) {\n\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\tthis[key] = ret;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn ret;\n\t\t},\n\n\t\t// Traverse a language definition with Depth First Search\n\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\tvisited = visited || {};\n\n\t\t\tvar objId = _.util.objId;\n\n\t\t\tfor (var i in o) {\n\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\tvar property = o[i],\n\t\t\t\t\t    propertyType = _.util.type(property);\n\n\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t}\n\t\t\t\t\telse if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tplugins: {},\n\n\t/**\n\t * This is the most high-level function in Prism’s API.\n\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t * each one of them.\n\t *\n\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t *\n\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t * @memberof Prism\n\t * @public\n\t */\n\thighlightAll: function(async, callback) {\n\t\t_.highlightAllUnder(document, async, callback);\n\t},\n\n\t/**\n\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t * {@link Prism.highlightElement} on each one of them.\n\t *\n\t * The following hooks will be run:\n\t * 1. `before-highlightall`\n\t * 2. All hooks of {@link Prism.highlightElement} for each element.\n\t *\n\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t * @memberof Prism\n\t * @public\n\t */\n\thighlightAllUnder: function(container, async, callback) {\n\t\tvar env = {\n\t\t\tcallback: callback,\n\t\t\tcontainer: container,\n\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t};\n\n\t\t_.hooks.run('before-highlightall', env);\n\n\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\tfor (var i = 0, element; element = env.elements[i++];) {\n\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t}\n\t},\n\n\t/**\n\t * Highlights the code inside a single element.\n\t *\n\t * The following hooks will be run:\n\t * 1. `before-sanity-check`\n\t * 2. `before-highlight`\n\t * 3. All hooks of {@link Prism.highlight}. These hooks will only be run by the current worker if `async` is `true`.\n\t * 4. `before-insert`\n\t * 5. `after-highlight`\n\t * 6. `complete`\n\t *\n\t * @param {Element} element The element containing the code.\n\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t *\n\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t * asynchronous highlighting to work. You can build your own bundle on the\n\t * [Download page](https://prismjs.com/download.html).\n\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t * @memberof Prism\n\t * @public\n\t */\n\thighlightElement: function(element, async, callback) {\n\t\t// Find language\n\t\tvar language = _.util.getLanguage(element);\n\t\tvar grammar = _.languages[language];\n\n\t\t// Set language on the element, if not present\n\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\n\t\t// Set language on the parent, for styling\n\t\tvar parent = element.parentElement;\n\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\t\t}\n\n\t\tvar code = element.textContent;\n\n\t\tvar env = {\n\t\t\telement: element,\n\t\t\tlanguage: language,\n\t\t\tgrammar: grammar,\n\t\t\tcode: code\n\t\t};\n\n\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t_.hooks.run('complete', env);\n\t\t\tcallback && callback.call(env.element);\n\t\t}\n\n\t\t_.hooks.run('before-sanity-check', env);\n\n\t\tif (!env.code) {\n\t\t\t_.hooks.run('complete', env);\n\t\t\tcallback && callback.call(env.element);\n\t\t\treturn;\n\t\t}\n\n\t\t_.hooks.run('before-highlight', env);\n\n\t\tif (!env.grammar) {\n\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\treturn;\n\t\t}\n\n\t\tif (async && _self.Worker) {\n\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\tworker.onmessage = function(evt) {\n\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t};\n\n\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\tlanguage: env.language,\n\t\t\t\tcode: env.code,\n\t\t\t\timmediateClose: true\n\t\t\t}));\n\t\t}\n\t\telse {\n\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t}\n\t},\n\n\t/**\n\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t * and the language definitions to use, and returns a string with the HTML produced.\n\t *\n\t * The following hooks will be run:\n\t * 1. `before-tokenize`\n\t * 2. `after-tokenize`\n\t * 3. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string} text A string with the code to be highlighted.\n\t * @param {Grammar} grammar An object containing the tokens to use.\n\t *\n\t * Usually a language definition like `Prism.languages.markup`.\n\t * @param {string} language The name of the language definition passed to `grammar`.\n\t * @returns {string} The highlighted HTML.\n\t * @memberof Prism\n\t * @public\n\t * @example\n\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t */\n\thighlight: function (text, grammar, language) {\n\t\tvar env = {\n\t\t\tcode: text,\n\t\t\tgrammar: grammar,\n\t\t\tlanguage: language\n\t\t};\n\t\t_.hooks.run('before-tokenize', env);\n\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t_.hooks.run('after-tokenize', env);\n\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t},\n\n\t/**\n\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t * and the language definitions to use, and returns an array with the tokenized code.\n\t *\n\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t *\n\t * This method could be useful in other contexts as well, as a very crude parser.\n\t *\n\t * @param {string} text A string with the code to be highlighted.\n\t * @param {Grammar} grammar An object containing the tokens to use.\n\t *\n\t * Usually a language definition like `Prism.languages.markup`.\n\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t * @memberof Prism\n\t * @public\n\t * @example\n\t * let code = `var foo = 0;`;\n\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t * tokens.forEach(token => {\n\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t *         console.log(`Found numeric literal: ${token.content}`);\n\t *     }\n\t * });\n\t */\n\ttokenize: function(text, grammar) {\n\t\tvar rest = grammar.rest;\n\t\tif (rest) {\n\t\t\tfor (var token in rest) {\n\t\t\t\tgrammar[token] = rest[token];\n\t\t\t}\n\n\t\t\tdelete grammar.rest;\n\t\t}\n\n\t\tvar tokenList = new LinkedList();\n\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\treturn toArray(tokenList);\n\t},\n\n\t/**\n\t * @namespace\n\t * @memberof Prism\n\t * @public\n\t */\n\thooks: {\n\t\tall: {},\n\n\t\t/**\n\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t *\n\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t *\n\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t *\n\t\t * @param {string} name The name of the hook.\n\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t * @public\n\t\t */\n\t\tadd: function (name, callback) {\n\t\t\tvar hooks = _.hooks.all;\n\n\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\thooks[name].push(callback);\n\t\t},\n\n\t\t/**\n\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t *\n\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t *\n\t\t * @param {string} name The name of the hook.\n\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t * @public\n\t\t */\n\t\trun: function (name, env) {\n\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {\n\t\t\t\tcallback(env);\n\t\t\t}\n\t\t}\n\t},\n\n\tToken: Token\n};\n_self.Prism = _;\n\n\n// Typescript note:\n// The following can be used to import the Token type in JSDoc:\n//\n//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n/**\n * Creates a new token.\n *\n * @param {string} type See {@link Token#type type}\n * @param {string | TokenStream} content See {@link Token#content content}\n * @param {string|string[]} [alias] The alias(es) of the token.\n * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n * @class\n * @global\n * @public\n */\nfunction Token(type, content, alias, matchedStr) {\n\t/**\n\t * The type of the token.\n\t *\n\t * This is usually the key of a pattern in a {@link Grammar}.\n\t *\n\t * @type {string}\n\t * @see GrammarToken\n\t * @public\n\t */\n\tthis.type = type;\n\t/**\n\t * The strings or tokens contained by this token.\n\t *\n\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t *\n\t * @type {string | TokenStream}\n\t * @public\n\t */\n\tthis.content = content;\n\t/**\n\t * The alias(es) of the token.\n\t *\n\t * @type {string|string[]}\n\t * @see GrammarToken\n\t * @public\n\t */\n\tthis.alias = alias;\n\t// Copy of the full string this token was created from\n\tthis.length = (matchedStr || '').length | 0;\n}\n\n/**\n * A token stream is an array of strings and {@link Token Token} objects.\n *\n * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n * them.\n *\n * 1. No adjacent strings.\n * 2. No empty strings.\n *\n *    The only exception here is the token stream that only contains the empty string and nothing else.\n *\n * @typedef {Array<string | Token>} TokenStream\n * @global\n * @public\n */\n\n/**\n * Converts the given token or token stream to an HTML representation.\n *\n * The following hooks will be run:\n * 1. `wrap`: On each {@link Token}.\n *\n * @param {string | Token | TokenStream} o The token or token stream to be converted.\n * @param {string} language The name of current language.\n * @returns {string} The HTML representation of the token or token stream.\n * @memberof Token\n * @static\n */\nToken.stringify = function stringify(o, language) {\n\tif (typeof o == 'string') {\n\t\treturn o;\n\t}\n\tif (Array.isArray(o)) {\n\t\tvar s = '';\n\t\to.forEach(function (e) {\n\t\t\ts += stringify(e, language);\n\t\t});\n\t\treturn s;\n\t}\n\n\tvar env = {\n\t\ttype: o.type,\n\t\tcontent: stringify(o.content, language),\n\t\ttag: 'span',\n\t\tclasses: ['token', o.type],\n\t\tattributes: {},\n\t\tlanguage: language\n\t};\n\n\tvar aliases = o.alias;\n\tif (aliases) {\n\t\tif (Array.isArray(aliases)) {\n\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t} else {\n\t\t\tenv.classes.push(aliases);\n\t\t}\n\t}\n\n\t_.hooks.run('wrap', env);\n\n\tvar attributes = '';\n\tfor (var name in env.attributes) {\n\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t}\n\n\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n};\n\n/**\n * @param {string} text\n * @param {LinkedList<string | Token>} tokenList\n * @param {any} grammar\n * @param {LinkedListNode<string | Token>} startNode\n * @param {number} startPos\n * @param {RematchOptions} [rematch]\n * @returns {void}\n * @private\n *\n * @typedef RematchOptions\n * @property {string} cause\n * @property {number} reach\n */\nfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\tfor (var token in grammar) {\n\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar patterns = grammar[token];\n\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar patternObj = patterns[j],\n\t\t\t\tinside = patternObj.inside,\n\t\t\t\tlookbehind = !!patternObj.lookbehind,\n\t\t\t\tgreedy = !!patternObj.greedy,\n\t\t\t\tlookbehindLength = 0,\n\t\t\t\talias = patternObj.alias;\n\n\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t}\n\n\t\t\t/** @type {RegExp} */\n\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t) {\n\n\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\n\t\t\t\tif (greedy && currentNode != tokenList.tail.prev) {\n\t\t\t\t\tpattern.lastIndex = pos;\n\t\t\t\t\tvar match = pattern.exec(text);\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar from = match.index + (lookbehind && match[1] ? match[1].length : 0);\n\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t}\n\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\tpos = p;\n\n\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\tfor (\n\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\tk = k.next\n\t\t\t\t\t) {\n\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t}\n\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t// replace with the new match\n\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t} else {\n\t\t\t\t\tpattern.lastIndex = 0;\n\n\t\t\t\t\tvar match = pattern.exec(str);\n\t\t\t\t}\n\n\t\t\t\tif (!match) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (lookbehind) {\n\t\t\t\t\tlookbehindLength = match[1] ? match[1].length : 0;\n\t\t\t\t}\n\n\t\t\t\tvar from = match.index + lookbehindLength,\n\t\t\t\t\tmatchStr = match[0].slice(lookbehindLength),\n\t\t\t\t\tto = from + matchStr.length,\n\t\t\t\t\tbefore = str.slice(0, from),\n\t\t\t\t\tafter = str.slice(to);\n\n\t\t\t\tvar reach = pos + str.length;\n\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\trematch.reach = reach;\n\t\t\t\t}\n\n\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\tif (before) {\n\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\tpos += before.length;\n\t\t\t\t}\n\n\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\tif (after) {\n\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t}\n\n\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t// this can only happen if the current pattern is greedy\n\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, {\n\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\treach: reach\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @typedef LinkedListNode\n * @property {T} value\n * @property {LinkedListNode<T> | null} prev The previous node.\n * @property {LinkedListNode<T> | null} next The next node.\n * @template T\n * @private\n */\n\n/**\n * @template T\n * @private\n */\nfunction LinkedList() {\n\t/** @type {LinkedListNode<T>} */\n\tvar head = { value: null, prev: null, next: null };\n\t/** @type {LinkedListNode<T>} */\n\tvar tail = { value: null, prev: head, next: null };\n\thead.next = tail;\n\n\t/** @type {LinkedListNode<T>} */\n\tthis.head = head;\n\t/** @type {LinkedListNode<T>} */\n\tthis.tail = tail;\n\tthis.length = 0;\n}\n\n/**\n * Adds a new node with the given value to the list.\n * @param {LinkedList<T>} list\n * @param {LinkedListNode<T>} node\n * @param {T} value\n * @returns {LinkedListNode<T>} The added node.\n * @template T\n */\nfunction addAfter(list, node, value) {\n\t// assumes that node != list.tail && values.length >= 0\n\tvar next = node.next;\n\n\tvar newNode = { value: value, prev: node, next: next };\n\tnode.next = newNode;\n\tnext.prev = newNode;\n\tlist.length++;\n\n\treturn newNode;\n}\n/**\n * Removes `count` nodes after the given node. The given node will not be removed.\n * @param {LinkedList<T>} list\n * @param {LinkedListNode<T>} node\n * @param {number} count\n * @template T\n */\nfunction removeRange(list, node, count) {\n\tvar next = node.next;\n\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\tnext = next.next;\n\t}\n\tnode.next = next;\n\tnext.prev = node;\n\tlist.length -= i;\n}\n/**\n * @param {LinkedList<T>} list\n * @returns {T[]}\n * @template T\n */\nfunction toArray(list) {\n\tvar array = [];\n\tvar node = list.head.next;\n\twhile (node !== list.tail) {\n\t\tarray.push(node.value);\n\t\tnode = node.next;\n\t}\n\treturn array;\n}\n\n\nif (!_self.document) {\n\tif (!_self.addEventListener) {\n\t\t// in Node.js\n\t\treturn _;\n\t}\n\n\tif (!_.disableWorkerMessageHandler) {\n\t\t// In worker\n\t\t_self.addEventListener('message', function (evt) {\n\t\t\tvar message = JSON.parse(evt.data),\n\t\t\t\tlang = message.language,\n\t\t\t\tcode = message.code,\n\t\t\t\timmediateClose = message.immediateClose;\n\n\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\tif (immediateClose) {\n\t\t\t\t_self.close();\n\t\t\t}\n\t\t}, false);\n\t}\n\n\treturn _;\n}\n\n// Get current script and highlight\nvar script = _.util.currentScript();\n\nif (script) {\n\t_.filename = script.src;\n\n\tif (script.hasAttribute('data-manual')) {\n\t\t_.manual = true;\n\t}\n}\n\nfunction highlightAutomaticallyCallback() {\n\tif (!_.manual) {\n\t\t_.highlightAll();\n\t}\n}\n\nif (!_.manual) {\n\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t// See https://github.com/PrismJS/prism/issues/2102\n\tvar readyState = document.readyState;\n\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t} else {\n\t\tif (window.requestAnimationFrame) {\n\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t}\n\t}\n}\n\nreturn _;\n\n})(_self);\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n*/\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n*/\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': /<!--[\\s\\S]*?-->/,\n\t'prolog': /<\\?[\\s\\S]+?\\?>/,\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\n(function (Prism) {\n\n\tvar string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: /@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\((?!\\s*\\))\\s*)(?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))+?(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': RegExp('[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'),\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n\t\t'important': /!important\\b/i,\n\t\t'function': /[-a-z0-9]+(?=\\()/i,\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\n\t\tPrism.languages.insertBefore('inside', 'attr-value', {\n\t\t\t'style-attr': {\n\t\t\t\tpattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'attr-name': {\n\t\t\t\t\t\tpattern: /^\\s*style/i,\n\t\t\t\t\t\tinside: markup.tag.inside\n\t\t\t\t\t},\n\t\t\t\t\t'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n\t\t\t\t\t'attr-value': {\n\t\t\t\t\t\tpattern: /.+/i,\n\t\t\t\t\t\tinside: Prism.languages.css\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\talias: 'language-css'\n\t\t\t}\n\t\t}, markup.tag);\n\t}\n\n}(Prism));\n\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'function': /\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|(?:get|set)(?=\\s*[\\[$\\w\\xA0-\\uFFFF])|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\${|}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t}\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\tif (typeof self === 'undefined' || !self.Prism || !self.document) {\n\t\treturn;\n\t}\n\n\tvar Prism = window.Prism;\n\n\tvar LOADING_MESSAGE = 'Loading…';\n\tvar FAILURE_MESSAGE = function (status, message) {\n\t\treturn '✖ Error ' + status + ' while fetching file: ' + message;\n\t};\n\tvar FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';\n\n\tvar EXTENSIONS = {\n\t\t'js': 'javascript',\n\t\t'py': 'python',\n\t\t'rb': 'ruby',\n\t\t'ps1': 'powershell',\n\t\t'psm1': 'powershell',\n\t\t'sh': 'bash',\n\t\t'bat': 'batch',\n\t\t'h': 'c',\n\t\t'tex': 'latex'\n\t};\n\n\tvar STATUS_ATTR = 'data-src-status';\n\tvar STATUS_LOADING = 'loading';\n\tvar STATUS_LOADED = 'loaded';\n\tvar STATUS_FAILED = 'failed';\n\n\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\n\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\n\n\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n\n\t/**\n\t * Sets the Prism `language-xxxx` or `lang-xxxx` class to the given language.\n\t *\n\t * @param {HTMLElement} element\n\t * @param {string} language\n\t * @returns {void}\n\t */\n\tfunction setLanguageClass(element, language) {\n\t\tvar className = element.className;\n\t\tclassName = className.replace(lang, ' ') + ' language-' + language;\n\t\telement.className = className.replace(/\\s+/g, ' ').trim();\n\t}\n\n\n\tPrism.hooks.add('before-highlightall', function (env) {\n\t\tenv.selector += ', ' + SELECTOR;\n\t});\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\n\t\tif (pre.matches(SELECTOR)) {\n\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\n\n\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\n\n\t\t\t// add code element with loading message\n\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\n\t\t\tcode.textContent = LOADING_MESSAGE;\n\n\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\tvar language = env.language;\n\t\t\tif (language === 'none') {\n\t\t\t\t// the language might be 'none' because there is no language set;\n\t\t\t\t// in this case, we want to use the extension as the language\n\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\n\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\n\t\t\t}\n\n\t\t\t// set language classes\n\t\t\tsetLanguageClass(code, language);\n\t\t\tsetLanguageClass(pre, language);\n\n\t\t\t// preload the language\n\t\t\tvar autoloader = Prism.plugins.autoloader;\n\t\t\tif (autoloader) {\n\t\t\t\tautoloader.loadLanguages(language);\n\t\t\t}\n\n\t\t\t// load file\n\t\t\tvar xhr = new XMLHttpRequest();\n\t\t\txhr.open('GET', src, true);\n\t\t\txhr.onreadystatechange = function () {\n\t\t\t\tif (xhr.readyState == 4) {\n\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\t\t// mark as loaded\n\t\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\n\n\t\t\t\t\t\t// highlight code\n\t\t\t\t\t\tcode.textContent = xhr.responseText;\n\t\t\t\t\t\tPrism.highlightElement(code);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// mark as failed\n\t\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\n\n\t\t\t\t\t\tif (xhr.status >= 400) {\n\t\t\t\t\t\t\tcode.textContent = FAILURE_MESSAGE(xhr.status, xhr.statusText);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcode.textContent = FAILURE_EMPTY_MESSAGE;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\txhr.send(null);\n\t\t}\n\t});\n\n\tPrism.plugins.fileHighlight = {\n\t\t/**\n\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\n\t\t *\n\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\n\t\t *\n\t\t * @param {ParentNode} [container=document]\n\t\t */\n\t\thighlight: function highlight(container) {\n\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\n\n\t\t\tfor (var i = 0, element; element = elements[i++];) {\n\t\t\t\tPrism.highlightElement(element);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar logged = false;\n\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\n\tPrism.fileHighlight = function () {\n\t\tif (!logged) {\n\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\n\t\t\tlogged = true;\n\t\t}\n\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\n\t}\n\n})();\n","import prismjs from \"prismjs\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\tconst menuData = {\n\t\theader: {\n\t\t\ttheme: 'web',\n\t\t\tbrand: {\n\t\t\t\tlabel: 'Esri Global Navigation',\n\t\t\t\tbrandText: 'Global Nav',\n\t\t\t\thref: './'\n\t\t\t},\n\t\t\tmenus: [\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'App Mode',\n\t\t\t\t\t\thref: './app-mode-nav.html'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Web Mode',\n\t\t\t\t\t\thref: 'esri-global-nav.html'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t],\n\t\t\tsearch: {\n\t\t\t\tlabel: 'Search',\n\t\t\t\tinline: true,\n\t\t\t\tdialog: {\n\t\t\t\t\taction: 'https://pages.codehub.esri.com/marketing/esri-search-page/',\n\t\t\t\t\tlabel: 'Esri',\n\t\t\t\t\t'submitLabel': 'Search',\n\t\t\t\t\t'cancelLabel': 'Cancel',\n\t\t\t\t\t'queryLabel': 'Search Esri.com'\n\t\t\t\t}\n\t\t\t},\n\t\t\tapps: {\n\t\t\t\tlabel: 'Applications',\n\t\t\t\tdisableDragAndDrop: false,\n\t\t\t\tdisplayIntro: true,\n\t\t\t\tieVersion: null,\n\t\t\t\ttext: {\n\t\t\t\t\tclear: \"Clear\",\n\t\t\t\t\tconfirm: \"Got it.\",\n\t\t\t\t\tdragAppsHere: \"Drag apps here that you don't use very often.\",\n\t\t\t\t\tintro: \"Drag and drop your favorite apps in any order to customize your app launcher\",\n\t\t\t\t\tremoved: \"This app is no longer available.\",\n\t\t\t\t\tremovedMessage: \"Removed app\",\n\t\t\t\t\tshowMore: \"Show More\"\n\t\t\t\t},\n\t\t\t\tprimary: [\n\t\t\t\t\t{\n\t\t\t\t\t\tabbr: \"APP\",\n\t\t\t\t\t\timage: \"http://www.arcgis.com/home/js/arcgisonline/sharing/dijit/css/images/app-icons/appstudio.png\",\n\t\t\t\t\t\tlabel: \"AppStudio for ArcGIS\",\n\t\t\t\t\t\turl: \"//appstudiodev.arcgis.com/apps.html\",\n\t\t\t\t\t\tcanAccess: true,\n\t\t\t\t\t\titemId: \"131049582192\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tabbr: \"Studio\",\n\t\t\t\t\t\tplaceHolderIcon: \"http://www.arcgis.com/home/js/arcgisonline/sharing/dijit/css/images/app-icons/svg-app-icon.svg\",\n\t\t\t\t\t\timage: null,\n\t\t\t\t\t\tlabel: \"Studio for ArcGIS\",\n\t\t\t\t\t\turl: \"//appstudiodev.arcgis.com/apps.html\",\n\t\t\t\t\t\tcanAccess: true,\n\t\t\t\t\t\titemId: \"131049582193\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tabbr: \"Test\",\n\t\t\t\t\t\tplaceHolderIcon: \"http://www.arcgis.com/home/js/arcgisonline/sharing/dijit/css/images/app-icons/svg-app-circle.svg\",\n\t\t\t\t\t\timage: null,\n\t\t\t\t\t\tlabel: \"Test App\",\n\t\t\t\t\t\turl: \"//appstudiodev.arcgis.com/apps.html\",\n\t\t\t\t\t\tcanAccess: true,\n\t\t\t\t\t\tisNew: true,\n\t\t\t\t\t\titemId: \"131049582194\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsecondary: [\n\t\t\t\t\t{\n\t\t\t\t\t\tabbr: \"APP\",\n\t\t\t\t\t\timage: \"http://www.arcgis.com/home/js/arcgisonline/sharing/dijit/css/images/app-icons/appstudio.png\",\n\t\t\t\t\t\tlabel: \"AppStudio for ArcGIS\",\n\t\t\t\t\t\turl: \"//appstudiodev.arcgis.com/apps.html\",\n\t\t\t\t\t\tcanAccess: true,\n\t\t\t\t\t\titemId: \"131049582195\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tabbr: \"Studio\",\n\t\t\t\t\t\tplaceHolderIcon: \"http://www.arcgis.com/home/js/arcgisonline/sharing/dijit/css/images/app-icons/svg-app-icon.svg\",\n\t\t\t\t\t\timage: null,\n\t\t\t\t\t\tlabel: \"Studio for ArcGIS\",\n\t\t\t\t\t\turl: \"//appstudiodev.arcgis.com/apps.html\",\n\t\t\t\t\t\tcanAccess: false,\n\t\t\t\t\t\titemId: \"131049582196\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tnotifications: {\n\t\t\t\tlabel: 'Notifications',\n\t\t\t\tdismissAllLabel: 'Dismiss all',\n\t\t\t\tdismissLabel: 'Dismiss notification',\n\t\t\t\tclearAllLabel: 'Mark all as read',\n\t\t\t\temptyMessage: {\n\t\t\t\t\timage: {\n\t\t\t\t\t\tpath: ['M15.5 1A14.5 14.5 0 1 0 30 15.5 14.5 14.5 0 0 0 15.5 1zm0 28.1a13.6 13.6 0 1 1 13.6-13.6 13.615 13.615 0 0 1-13.6 13.6zM8.581 17.276l.637-.636 3.288 3.098 10.073-9.92.637.637-10.71 10.556z'],\n\t\t\t\t\t\tviewBox: '0 0 32 32'\n\t\t\t\t\t},\n\t\t\t\t\ttext: \"You're up to date!\"\n\t\t\t\t},\n\t\t\t\tmessages: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: 'You accepted the invitation to join the <a href=\"#\">Basemap Gallery</a>.',\n\t\t\t\t\t\tdate: 'Yesterday',\n\t\t\t\t\t\tid: '131049582194'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: 'You were invited to join the <a href=\"#\">Public Analysis group</a>.',\n\t\t\t\t\t\tdate: '2 days ago',\n\t\t\t\t\t\tid: '131049582197'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: 'You accepted the invitation to join the <a href=\"#\">Basemap Gallery</a>.',\n\t\t\t\t\t\tdate: '3 days ago',\n\t\t\t\t\t\tid: '131049582194'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: 'You were invited to join the <a href=\"#\">Public Analysis group</a>.',\n\t\t\t\t\t\tdate: '3 days ago',\n\t\t\t\t\t\tid: '131049582197'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: 'You accepted the invitation to join the <a href=\"#\">Basemap Gallery</a>.',\n\t\t\t\t\t\tdate: '4 days ago',\n\t\t\t\t\t\tid: '131049582194'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: 'You were invited to join the <a href=\"#\">Public Analysis group</a>.',\n\t\t\t\t\t\tdate: '5 days ago',\n\t\t\t\t\t\tid: '131049582197'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: 'You accepted the invitation to join the <a href=\"#\">Basemap Gallery</a>.',\n\t\t\t\t\t\tdate: '5 days ago',\n\t\t\t\t\t\tid: '131049582194'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: 'You were invited to join the <a href=\"#\">Public Analysis group</a>.',\n\t\t\t\t\t\tdate: '1 week ago',\n\t\t\t\t\t\tid: '131049582197'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: 'You requested to join the <a href=\"#\">Basemap Gallery</a> group.',\n\t\t\t\t\t\tdate: '2 weeks ago',\n\t\t\t\t\t\tid: '131049582199'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\taccount: {\n\t\t\t\tlabel: 'Account Profile',\n\t\t\t\tcontrols: {\n\t\t\t\t\tsignin: 'Sign In',\n\t\t\t\t\tsignout: 'Sign Out',\n\t\t\t\t\tswitch: 'Switch Account'\n\t\t\t\t},\n\t\t\t\tmenus: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Profile & Settings',\n\t\t\t\t\t\thref: '#user-menu-link-1'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'My Esri',\n\t\t\t\t\t\thref: '#user-menu-link-2'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Training',\n\t\t\t\t\t\thref: '#user-menu-link-3'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Community & Forums',\n\t\t\t\t\t\thref: '#user-menu-link-4'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tuser: {\n\t\t\t\t\tname: 'Cassidy Bishop',\n\t\t\t\t\tid: 'iamoktatester@gmail.com',\n\t\t\t\t\tgroup: 'Riverside City Mgmt.',\n\t\t\t\t\timage: '//placehold.it/300x300'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tfooter: {\n\t\t\thideMenus: false,\n\t\t\tlabel: 'Esri',\n\t\t\tbrand: {\n\t\t\t\tlabel: 'Esri: The Science of Where',\n\t\t\t\thref: 'https://www.esri.com/about-esri',\n\t\t\t\tviewBox: '0 0 114 90',\n\t\t\t\tpath: './img/gnav-tsow-frame.svg'\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tlabel: 'Esri Sites',\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'ArcGIS',\n\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'About ArcGIS',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/arcgis/about-arcgis'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'ArcGIS Pro',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/en/arcgis/products/arcgis-pro/Overview'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'ArcGIS Enterprise',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/en/arcgis/products/arcgis-enterprise/Overview'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'ArcGIS Online',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/software/arcgis/arcgisonline'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Apps',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/software/apps'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'ArcGIS for Developers',\n\t\t\t\t\t\t\t\thref: 'https://developers.arcgis.com/'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Community',\n\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Esri Community (GeoNet)',\n\t\t\t\t\t\t\t\thref: 'https://geonet.esri.com/'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'ArcGIS Blog',\n\t\t\t\t\t\t\t\thref: 'https://blogs.esri.com/esri/arcgis'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Early Adopter Community',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/early-adopter-community'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Events',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/events'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Understanding GIS',\n\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'What is GIS?',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/what-is-gis'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Training',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/training'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Maps We Love',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/products/maps-we-love'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Blog',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/about/newsroom/blog'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'WhereNext Magazine',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/about/newsroom/publications/wherenext/'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Learn ArcGIS',\n\t\t\t\t\t\t\t\thref: 'https://learn.arcgis.com/en/'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Company',\n\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'About Esri',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/about-esri'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Contact Us',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/about-esri/contact'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Esri Offices Worldwide',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/about-esri/contact#international'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Careers',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/careers'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Open Vision',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/software/open'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Partners',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/partners'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Special programs',\n\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Conservation',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/esri-conservation-program'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Disaster Response',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/services/disaster-response'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Education',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/industries/education'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Nonprofit',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/nonprofit'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'US Navy SeaPort-e Information',\n\t\t\t\t\t\t\t\thref: 'https://www.esri.com/landing-pages/seaport'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tsocial: {\n\t\t\t\tlabel: 'Social Media',\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Facebook',\n\t\t\t\t\t\tplatform: 'facebook',\n\t\t\t\t\t\thref: 'https://www.facebook.com/esrigis',\n\t\t\t\t\t\timage: {\n\t\t\t\t\t\t\tviewBox: '0 0 38 38',\n\t\t\t\t\t\t\tpath: ['M38 38V0H0v38h17.2V21.9H14v-5.7h3.2v-3.7c0-2.6 1.2-6.7 6.7-6.7h4.9v5.5h-3.6c-.6 0-1.4.3-1.4 1.5v3.3h5.1l-.6 5.7h-4.5v16.1H38z']\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Twitter',\n\t\t\t\t\t\tplatform: 'twitter',\n\t\t\t\t\t\thref: 'https://twitter.com/Esri',\n\t\t\t\t\t\timage: {\n\t\t\t\t\t\t\tviewBox: '0 0 512 512',\n\t\t\t\t\t\t\tpath: ['M512.002 97.211c-18.84 8.354-39.082 14.001-60.33 16.54 21.686-13 38.342-33.585 46.186-58.115a210.29 210.29 0 0 1-66.705 25.49c-19.16-20.415-46.461-33.17-76.674-33.17-58.011 0-105.042 47.029-105.042 105.039 0 8.233.929 16.25 2.72 23.939-87.3-4.382-164.701-46.2-216.509-109.753-9.042 15.514-14.223 33.558-14.223 52.809 0 36.444 18.544 68.596 46.73 87.433a104.614 104.614 0 0 1-47.577-13.139c-.01.438-.01.878-.01 1.321 0 50.894 36.209 93.348 84.261 103a105.245 105.245 0 0 1-27.674 3.687c-6.769 0-13.349-.66-19.764-1.888 13.368 41.73 52.16 72.104 98.126 72.949-35.95 28.176-81.243 44.967-130.458 44.967-8.479 0-16.84-.496-25.058-1.471 46.486 29.807 101.701 47.197 161.021 47.197 193.211 0 298.868-160.062 298.868-298.872 0-4.554-.104-9.084-.305-13.59 20.526-14.809 38.335-33.309 52.417-54.373z']\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'LinkedIn',\n\t\t\t\t\t\tplatform: 'linkedin',\n\t\t\t\t\t\thref: 'https://www.linkedin.com/company/esri',\n\t\t\t\t\t\timage: {\n\t\t\t\t\t\t\tviewBox: '0 0 24 24',\n\t\t\t\t\t\t\tpath: ['M0 0v24h24V0zm8 19H5V8h3zM6.5 6.7A1.8 1.8 0 1 1 8.3 5a1.8 1.8 0 0 1-1.8 1.7zM20 19h-3v-5.6c0-3.4-4-3.1-4 0V19h-3V8h3v1.8c1.4-2.6 7-2.8 7 2.5z']\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Instagram',\n\t\t\t\t\t\tplatform: 'instagram',\n\t\t\t\t\t\thref: 'https://www.instagram.com/esrigram/',\n\t\t\t\t\t\timage: {\n\t\t\t\t\t\t\tviewBox: '0 0 30 30',\n\t\t\t\t\t\t\tpath: ['M29.91 8.815c-.073-1.596-.327-2.686-.697-3.64a7.354 7.354 0 0 0-1.73-2.657 7.352 7.352 0 0 0-2.657-1.73C23.87.416 22.78.162 21.184.09 19.584.017 19.074 0 15 0s-4.585.017-6.184.09C7.219.163 6.129.417 5.174.787a7.352 7.352 0 0 0-2.656 1.73 7.354 7.354 0 0 0-1.73 2.657C.416 6.13.162 7.22.09 8.815.017 10.415 0 10.926 0 15s.017 4.585.09 6.184c.073 1.597.327 2.687.697 3.642a7.353 7.353 0 0 0 1.73 2.656 7.353 7.353 0 0 0 2.657 1.73c.955.371 2.045.625 3.642.698 1.6.073 2.11.09 6.184.09s4.585-.017 6.184-.09c1.597-.073 2.687-.327 3.642-.697a7.353 7.353 0 0 0 2.656-1.73 7.353 7.353 0 0 0 1.73-2.657c.371-.955.625-2.045.698-3.642.073-1.6.09-2.11.09-6.184s-.017-4.585-.09-6.185zm-2.997 12.232c-.064 1.412-.287 2.153-.496 2.691a4.376 4.376 0 0 1-1.056 1.623 4.371 4.371 0 0 1-1.622 1.055c-.539.21-1.28.433-2.691.497-1.573.072-2.045.087-6.048.087s-4.475-.015-6.047-.087c-1.412-.064-2.153-.287-2.691-.496a4.376 4.376 0 0 1-1.623-1.056 4.371 4.371 0 0 1-1.055-1.622c-.21-.539-.433-1.28-.497-2.691C3.015 19.475 3 19.003 3 15s.015-4.475.087-6.047c.064-1.412.287-2.153.496-2.691a4.38 4.38 0 0 1 1.056-1.623A4.371 4.371 0 0 1 6.26 3.584c.539-.21 1.28-.433 2.691-.497C10.525 3.015 10.997 3 15 3s4.475.015 6.047.087c1.412.064 2.153.287 2.691.496a4.38 4.38 0 0 1 1.623 1.056c.493.493.8.963 1.055 1.622.21.539.433 1.28.497 2.691.072 1.573.087 2.045.087 6.048s-.015 4.475-.087 6.047zM15 7.175a7.825 7.825 0 1 0 0 15.65 7.825 7.825 0 0 0 0-15.65zm0 12.65c-2.66 0-4.825-2.164-4.825-4.825s2.164-4.825 4.825-4.825 4.825 2.164 4.825 4.825-2.164 4.825-4.825 4.825zm6.007-12.832a2 2 0 1 0 4 0 2 2 0 1 0-4 0']\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'YouTube',\n\t\t\t\t\t\tplatform: 'youtube',\n\t\t\t\t\t\thref: 'https://www.youtube.com/user/esritv',\n\t\t\t\t\t\timage: {\n\t\t\t\t\t\t\tviewBox: '0 0 310 310',\n\t\t\t\t\t\t\tpath: ['M297.917 64.645c-11.19-13.302-31.85-18.728-71.306-18.728H83.386c-40.359 0-61.369 5.776-72.517 19.938C0 79.663 0 100.008 0 128.166v53.669c0 54.551 12.896 82.248 83.386 82.248h143.226c34.216 0 53.176-4.788 65.442-16.527C304.633 235.518 310 215.863 310 181.835v-53.669c0-29.695-.841-50.16-12.083-63.521zm-98.896 97.765l-65.038 33.991a9.997 9.997 0 0 1-14.632-8.863v-67.764a10 10 0 0 1 14.609-8.874l65.038 33.772a10 10 0 0 1 .023 17.738z']\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'GeoNet',\n\t\t\t\t\t\tplatform: 'geonet',\n\t\t\t\t\t\thref: 'https://geonet.esri.com/',\n\t\t\t\t\t\timage: {\n\t\t\t\t\t\t\tviewBox: '7 7 16 16',\n\t\t\t\t\t\t\tpath: ['M23 19h-3v4l-4-4H7V9h16z']\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tinfo: {\n\t\t\t\tlabel: 'Additional Links',\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Privacy',\n\t\t\t\t\t\thref: 'https://www.esri.com/legal/privacy'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Legal',\n\t\t\t\t\t\thref: 'https://www.esri.com/legal'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Site Map',\n\t\t\t\t\t\thref: 'http://www.esri.com/site-map'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Terms and Conditions',\n\t\t\t\t\t\thref: 'https://www.esri.com/legal/software-license'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Code of Business Conduct',\n\t\t\t\t\t\thref: 'https://www.esri.com/about-esri/code-of-conduct'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tlanguage: {\n\t\t\t\tlabel: 'Switch Languages',\n\t\t\t\tbuttonLabel: 'United States (English)',\n\t\t\t\tsubmitLabel: 'Change',\n\t\t\t\tgreetingLabel: 'Hello!',\n\t\t\t\tmessageLabel: 'You are seeing the English page. Is this correct?',\n\t\t\t\tcloseLabel: 'Close Navigation',\n\t\t\t\toptionsLabel: 'Desired Language',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'English',\n\t\t\t\t\t\tvalue: '#the-english-page'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'French',\n\t\t\t\t\t\tvalue: '#the-french-page'\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: 'Spanish',\n\t\t\t\t\t\tvalue: '#the-spanish-page'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t};\n\n\tesriGlobalNav.create({headerElm: '.esri-header-barrier', footerElm: '.esri-footer-barrier', menuData});\n});\n"],"names":["_self","window","WorkerGlobalScope","self","Prism","lang","uniqueId","_","manual","disableWorkerMessageHandler","encode","tokens","Token","type","content","alias","Array","isArray","map","replace","o","Object","prototype","toString","call","slice","obj","defineProperty","value","deepClone","visited","clone","id","util","objId","key","hasOwnProperty","forEach","v","i","element","test","className","parentElement","match","toLowerCase","document","currentScript","Error","err","src","exec","stack","scripts","getElementsByTagName","defaultActivation","no","classList","contains","redef","languages","inside","before","insert","root","grammar","ret","token","newToken","old","DFS","callback","property","propertyType","async","highlightAllUnder","container","env","hooks","run","elements","apply","querySelectorAll","selector","highlightElement","language","getLanguage","parent","nodeName","code","textContent","insertHighlightedCode","highlightedCode","innerHTML","Worker","worker","filename","onmessage","evt","data","postMessage","JSON","stringify","highlight","text","tokenize","rest","tokenList","LinkedList","head","toArray","name","all","push","callbacks","length","matchedStr","s","e","aliases","classes","attributes","tag","join","matchGrammar","startNode","startPos","rematch","patterns","j","cause","patternObj","lookbehind","greedy","lookbehindLength","pattern","global","flags","RegExp","source","currentNode","next","pos","tail","reach","str","removeCount","prev","lastIndex","from","index","to","p","k","matchStr","after","removeFrom","addAfter","wrapped","list","node","newNode","removeRange","count","array","addEventListener","message","parse","immediateClose","close","script","hasAttribute","highlightAutomaticallyCallback","highlightAll","readyState","defer","requestAnimationFrame","setTimeout","module","exports","markup","add","addInlined","tagName","includedCdataInside","def","insertBefore","html","mathml","svg","xml","extend","ssml","atom","rss","string","css","clike","javascript","js","LOADING_MESSAGE","FAILURE_MESSAGE","status","FAILURE_EMPTY_MESSAGE","EXTENSIONS","STATUS_ATTR","STATUS_LOADING","STATUS_LOADED","STATUS_FAILED","SELECTOR","setLanguageClass","trim","pre","matches","setAttribute","appendChild","createElement","getAttribute","extension","autoloader","plugins","loadLanguages","xhr","XMLHttpRequest","open","onreadystatechange","responseText","statusText","send","fileHighlight","logged","warn","arguments","menuData","create","headerElm","footerElm"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYXVsNzE0NC9Eb2N1bWVudHMvUHJvamVjdHMvZ2xvYmFsLW5hdi9ub2RlX21vZHVsZXMvcHJpc21qcy9wcmlzbS5qcyIsIi9Vc2Vycy9wYXVsNzE0NC9Eb2N1bWVudHMvUHJvamVjdHMvZ2xvYmFsLW5hdi9zcmMvaG9tZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tY29yZS5qc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJXZWJXb3JrZXJcIi8+XG5cbnZhciBfc2VsZiA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJylcblx0PyB3aW5kb3cgICAvLyBpZiBpbiBicm93c2VyXG5cdDogKFxuXHRcdCh0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSlcblx0XHQ/IHNlbGYgLy8gaWYgaW4gd29ya2VyXG5cdFx0OiB7fSAgIC8vIGlmIGluIG5vZGUganNcblx0KTtcblxuLyoqXG4gKiBQcmlzbTogTGlnaHR3ZWlnaHQsIHJvYnVzdCwgZWxlZ2FudCBzeW50YXggaGlnaGxpZ2h0aW5nXG4gKlxuICogQGxpY2Vuc2UgTUlUIDxodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVD5cbiAqIEBhdXRob3IgTGVhIFZlcm91IDxodHRwczovL2xlYS52ZXJvdS5tZT5cbiAqIEBuYW1lc3BhY2VcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFByaXNtID0gKGZ1bmN0aW9uIChfc2VsZil7XG5cbi8vIFByaXZhdGUgaGVscGVyIHZhcnNcbnZhciBsYW5nID0gL1xcYmxhbmcoPzp1YWdlKT8tKFtcXHctXSspXFxiL2k7XG52YXIgdW5pcXVlSWQgPSAwO1xuXG5cbnZhciBfID0ge1xuXHQvKipcblx0ICogQnkgZGVmYXVsdCwgUHJpc20gd2lsbCBhdHRlbXB0IHRvIGhpZ2hsaWdodCBhbGwgY29kZSBlbGVtZW50cyAoYnkgY2FsbGluZyB7QGxpbmsgUHJpc20uaGlnaGxpZ2h0QWxsfSkgb24gdGhlXG5cdCAqIGN1cnJlbnQgcGFnZSBhZnRlciB0aGUgcGFnZSBmaW5pc2hlZCBsb2FkaW5nLiBUaGlzIG1pZ2h0IGJlIGEgcHJvYmxlbSBpZiBlLmcuIHlvdSB3YW50ZWQgdG8gYXN5bmNocm9ub3VzbHkgbG9hZFxuXHQgKiBhZGRpdGlvbmFsIGxhbmd1YWdlcyBvciBwbHVnaW5zIHlvdXJzZWxmLlxuXHQgKlxuXHQgKiBCeSBzZXR0aW5nIHRoaXMgdmFsdWUgdG8gYHRydWVgLCBQcmlzbSB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IGhpZ2hsaWdodCBhbGwgY29kZSBlbGVtZW50cyBvbiB0aGUgcGFnZS5cblx0ICpcblx0ICogWW91IG9idmlvdXNseSBoYXZlIHRvIGNoYW5nZSB0aGlzIHZhbHVlIGJlZm9yZSB0aGUgYXV0b21hdGljIGhpZ2hsaWdodGluZyBzdGFydGVkLiBUbyBkbyB0aGlzLCB5b3UgY2FuIGFkZCBhblxuXHQgKiBlbXB0eSBQcmlzbSBvYmplY3QgaW50byB0aGUgZ2xvYmFsIHNjb3BlIGJlZm9yZSBsb2FkaW5nIHRoZSBQcmlzbSBzY3JpcHQgbGlrZSB0aGlzOlxuXHQgKlxuXHQgKiBgYGBqc1xuXHQgKiB3aW5kb3cuUHJpc20gPSB3aW5kb3cuUHJpc20gfHwge307XG5cdCAqIFByaXNtLm1hbnVhbCA9IHRydWU7XG5cdCAqIC8vIGFkZCBhIG5ldyA8c2NyaXB0PiB0byBsb2FkIFByaXNtJ3Mgc2NyaXB0XG5cdCAqIGBgYFxuXHQgKlxuXHQgKiBAZGVmYXVsdCBmYWxzZVxuXHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0ICogQG1lbWJlcm9mIFByaXNtXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdG1hbnVhbDogX3NlbGYuUHJpc20gJiYgX3NlbGYuUHJpc20ubWFudWFsLFxuXHRkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXI6IF9zZWxmLlByaXNtICYmIF9zZWxmLlByaXNtLmRpc2FibGVXb3JrZXJNZXNzYWdlSGFuZGxlcixcblxuXHQvKipcblx0ICogQSBuYW1lc3BhY2UgZm9yIHV0aWxpdHkgbWV0aG9kcy5cblx0ICpcblx0ICogQWxsIGZ1bmN0aW9uIGluIHRoaXMgbmFtZXNwYWNlIHRoYXQgYXJlIG5vdCBleHBsaWNpdGx5IG1hcmtlZCBhcyBfcHVibGljXyBhcmUgZm9yIF9faW50ZXJuYWwgdXNlIG9ubHlfXyBhbmQgbWF5XG5cdCAqIGNoYW5nZSBvciBkaXNhcHBlYXIgYXQgYW55IHRpbWUuXG5cdCAqXG5cdCAqIEBuYW1lc3BhY2Vcblx0ICogQG1lbWJlcm9mIFByaXNtXG5cdCAqL1xuXHR1dGlsOiB7XG5cdFx0ZW5jb2RlOiBmdW5jdGlvbiBlbmNvZGUodG9rZW5zKSB7XG5cdFx0XHRpZiAodG9rZW5zIGluc3RhbmNlb2YgVG9rZW4pIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBUb2tlbih0b2tlbnMudHlwZSwgZW5jb2RlKHRva2Vucy5jb250ZW50KSwgdG9rZW5zLmFsaWFzKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0b2tlbnMpKSB7XG5cdFx0XHRcdHJldHVybiB0b2tlbnMubWFwKGVuY29kZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdG9rZW5zLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoL1xcdTAwYTAvZywgJyAnKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgdHlwZSBvZiB0aGUgZ2l2ZW4gdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge2FueX0gb1xuXHRcdCAqIEByZXR1cm5zIHtzdHJpbmd9XG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiB0eXBlKG51bGwpICAgICAgPT09ICdOdWxsJ1xuXHRcdCAqIHR5cGUodW5kZWZpbmVkKSA9PT0gJ1VuZGVmaW5lZCdcblx0XHQgKiB0eXBlKDEyMykgICAgICAgPT09ICdOdW1iZXInXG5cdFx0ICogdHlwZSgnZm9vJykgICAgID09PSAnU3RyaW5nJ1xuXHRcdCAqIHR5cGUodHJ1ZSkgICAgICA9PT0gJ0Jvb2xlYW4nXG5cdFx0ICogdHlwZShbMSwgMl0pICAgID09PSAnQXJyYXknXG5cdFx0ICogdHlwZSh7fSkgICAgICAgID09PSAnT2JqZWN0J1xuXHRcdCAqIHR5cGUoU3RyaW5nKSAgICA9PT0gJ0Z1bmN0aW9uJ1xuXHRcdCAqIHR5cGUoL2FiYysvKSAgICA9PT0gJ1JlZ0V4cCdcblx0XHQgKi9cblx0XHR0eXBlOiBmdW5jdGlvbiAobykge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgYSB1bmlxdWUgbnVtYmVyIGZvciB0aGUgZ2l2ZW4gb2JqZWN0LiBMYXRlciBjYWxscyB3aWxsIHN0aWxsIHJldHVybiB0aGUgc2FtZSBudW1iZXIuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge09iamVjdH0gb2JqXG5cdFx0ICogQHJldHVybnMge251bWJlcn1cblx0XHQgKi9cblx0XHRvYmpJZDogZnVuY3Rpb24gKG9iaikge1xuXHRcdFx0aWYgKCFvYmpbJ19faWQnXSkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnX19pZCcsIHsgdmFsdWU6ICsrdW5pcXVlSWQgfSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gb2JqWydfX2lkJ107XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENyZWF0ZXMgYSBkZWVwIGNsb25lIG9mIHRoZSBnaXZlbiBvYmplY3QuXG5cdFx0ICpcblx0XHQgKiBUaGUgbWFpbiBpbnRlbmRlZCB1c2Ugb2YgdGhpcyBmdW5jdGlvbiBpcyB0byBjbG9uZSBsYW5ndWFnZSBkZWZpbml0aW9ucy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7VH0gb1xuXHRcdCAqIEBwYXJhbSB7UmVjb3JkPG51bWJlciwgYW55Pn0gW3Zpc2l0ZWRdXG5cdFx0ICogQHJldHVybnMge1R9XG5cdFx0ICogQHRlbXBsYXRlIFRcblx0XHQgKi9cblx0XHRjbG9uZTogZnVuY3Rpb24gZGVlcENsb25lKG8sIHZpc2l0ZWQpIHtcblx0XHRcdHZpc2l0ZWQgPSB2aXNpdGVkIHx8IHt9O1xuXG5cdFx0XHR2YXIgY2xvbmUsIGlkO1xuXHRcdFx0c3dpdGNoIChfLnV0aWwudHlwZShvKSkge1xuXHRcdFx0XHRjYXNlICdPYmplY3QnOlxuXHRcdFx0XHRcdGlkID0gXy51dGlsLm9iaklkKG8pO1xuXHRcdFx0XHRcdGlmICh2aXNpdGVkW2lkXSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHZpc2l0ZWRbaWRdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjbG9uZSA9IC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gKi8gKHt9KTtcblx0XHRcdFx0XHR2aXNpdGVkW2lkXSA9IGNsb25lO1xuXG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIG8pIHtcblx0XHRcdFx0XHRcdGlmIChvLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRcdFx0Y2xvbmVba2V5XSA9IGRlZXBDbG9uZShvW2tleV0sIHZpc2l0ZWQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKGNsb25lKTtcblxuXHRcdFx0XHRjYXNlICdBcnJheSc6XG5cdFx0XHRcdFx0aWQgPSBfLnV0aWwub2JqSWQobyk7XG5cdFx0XHRcdFx0aWYgKHZpc2l0ZWRbaWRdKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmlzaXRlZFtpZF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0dmlzaXRlZFtpZF0gPSBjbG9uZTtcblxuXHRcdFx0XHRcdCgvKiogQHR5cGUge0FycmF5fSAqLygvKiogQHR5cGUge2FueX0gKi8obykpKS5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpKSB7XG5cdFx0XHRcdFx0XHRjbG9uZVtpXSA9IGRlZXBDbG9uZSh2LCB2aXNpdGVkKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKGNsb25lKTtcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHJldHVybiBvO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBQcmlzbSBsYW5ndWFnZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBzZXQgYnkgYSBgbGFuZ3VhZ2UteHh4eGAgb3IgYGxhbmcteHh4eGAgY2xhc3MuXG5cdFx0ICpcblx0XHQgKiBJZiBubyBsYW5ndWFnZSBpcyBzZXQgZm9yIHRoZSBlbGVtZW50IG9yIHRoZSBlbGVtZW50IGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYCwgYG5vbmVgIHdpbGwgYmUgcmV0dXJuZWQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcblx0XHQgKiBAcmV0dXJucyB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdGdldExhbmd1YWdlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdFx0d2hpbGUgKGVsZW1lbnQgJiYgIWxhbmcudGVzdChlbGVtZW50LmNsYXNzTmFtZSkpIHtcblx0XHRcdFx0ZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcblx0XHRcdH1cblx0XHRcdGlmIChlbGVtZW50KSB7XG5cdFx0XHRcdHJldHVybiAoZWxlbWVudC5jbGFzc05hbWUubWF0Y2gobGFuZykgfHwgWywgJ25vbmUnXSlbMV0udG9Mb3dlckNhc2UoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAnbm9uZSc7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIHNjcmlwdCBlbGVtZW50IHRoYXQgaXMgY3VycmVudGx5IGV4ZWN1dGluZy5cblx0XHQgKlxuXHRcdCAqIFRoaXMgZG9lcyBfX25vdF9fIHdvcmsgZm9yIGxpbmUgc2NyaXB0IGVsZW1lbnQuXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJucyB7SFRNTFNjcmlwdEVsZW1lbnQgfCBudWxsfVxuXHRcdCAqL1xuXHRcdGN1cnJlbnRTY3JpcHQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCdjdXJyZW50U2NyaXB0JyBpbiBkb2N1bWVudCAmJiAxIDwgMiAvKiBoYWNrIHRvIHRyaXAgVFMnIGZsb3cgYW5hbHlzaXMgKi8pIHtcblx0XHRcdFx0cmV0dXJuIC8qKiBAdHlwZSB7YW55fSAqLyAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElFMTEgd29ya2Fyb3VuZFxuXHRcdFx0Ly8gd2UnbGwgZ2V0IHRoZSBzcmMgb2YgdGhlIGN1cnJlbnQgc2NyaXB0IGJ5IHBhcnNpbmcgSUUxMSdzIGVycm9yIHN0YWNrIHRyYWNlXG5cdFx0XHQvLyB0aGlzIHdpbGwgbm90IHdvcmsgZm9yIGlubGluZSBzY3JpcHRzXG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcigpO1xuXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdC8vIEdldCBmaWxlIHNyYyB1cmwgZnJvbSBzdGFjay4gU3BlY2lmaWNhbGx5IHdvcmtzIHdpdGggdGhlIGZvcm1hdCBvZiBzdGFjayB0cmFjZXMgaW4gSUUuXG5cdFx0XHRcdC8vIEEgc3RhY2sgd2lsbCBsb29rIGxpa2UgdGhpczpcblx0XHRcdFx0Ly9cblx0XHRcdFx0Ly8gRXJyb3Jcblx0XHRcdFx0Ly8gICAgYXQgXy51dGlsLmN1cnJlbnRTY3JpcHQgKGh0dHA6Ly9sb2NhbGhvc3QvY29tcG9uZW50cy9wcmlzbS1jb3JlLmpzOjExOTo1KVxuXHRcdFx0XHQvLyAgICBhdCBHbG9iYWwgY29kZSAoaHR0cDovL2xvY2FsaG9zdC9jb21wb25lbnRzL3ByaXNtLWNvcmUuanM6NjA2OjEpXG5cblx0XHRcdFx0dmFyIHNyYyA9ICgvYXQgW14oXFxyXFxuXSpcXCgoLiopOi4rOi4rXFwpJC9pLmV4ZWMoZXJyLnN0YWNrKSB8fCBbXSlbMV07XG5cdFx0XHRcdGlmIChzcmMpIHtcblx0XHRcdFx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcblx0XHRcdFx0XHRmb3IgKHZhciBpIGluIHNjcmlwdHMpIHtcblx0XHRcdFx0XHRcdGlmIChzY3JpcHRzW2ldLnNyYyA9PSBzcmMpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHNjcmlwdHNbaV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHdoZXRoZXIgYSBnaXZlbiBjbGFzcyBpcyBhY3RpdmUgZm9yIGBlbGVtZW50YC5cblx0XHQgKlxuXHRcdCAqIFRoZSBjbGFzcyBjYW4gYmUgYWN0aXZhdGVkIGlmIGBlbGVtZW50YCBvciBvbmUgb2YgaXRzIGFuY2VzdG9ycyBoYXMgdGhlIGdpdmVuIGNsYXNzIGFuZCBpdCBjYW4gYmUgZGVhY3RpdmF0ZWRcblx0XHQgKiBpZiBgZWxlbWVudGAgb3Igb25lIG9mIGl0cyBhbmNlc3RvcnMgaGFzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIGdpdmVuIGNsYXNzLiBUaGUgX25lZ2F0ZWQgdmVyc2lvbl8gb2YgdGhlXG5cdFx0ICogZ2l2ZW4gY2xhc3MgaXMganVzdCB0aGUgZ2l2ZW4gY2xhc3Mgd2l0aCBhIGBuby1gIHByZWZpeC5cblx0XHQgKlxuXHRcdCAqIFdoZXRoZXIgdGhlIGNsYXNzIGlzIGFjdGl2ZSBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBjbG9zZXN0IGFuY2VzdG9yIG9mIGBlbGVtZW50YCAod2hlcmUgYGVsZW1lbnRgIGl0c2VsZiBpc1xuXHRcdCAqIGNsb3Nlc3QgYW5jZXN0b3IpIHRoYXQgaGFzIHRoZSBnaXZlbiBjbGFzcyBvciB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIGl0LiBJZiBuZWl0aGVyIGBlbGVtZW50YCBub3IgYW55IG9mIGl0c1xuXHRcdCAqIGFuY2VzdG9ycyBoYXZlIHRoZSBnaXZlbiBjbGFzcyBvciB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIGl0LCB0aGVuIHRoZSBkZWZhdWx0IGFjdGl2YXRpb24gd2lsbCBiZSByZXR1cm5lZC5cblx0XHQgKlxuXHRcdCAqIEluIHRoZSBwYXJhZG94aWNhbCBzaXR1YXRpb24gd2hlcmUgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgY29udGFpbnMgX19ib3RoX18gdGhlIGdpdmVuIGNsYXNzIGFuZCB0aGUgbmVnYXRlZFxuXHRcdCAqIHZlcnNpb24gb2YgaXQsIHRoZSBjbGFzcyBpcyBjb25zaWRlcmVkIGFjdGl2ZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWVcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZWZhdWx0QWN0aXZhdGlvbj1mYWxzZV1cblx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHRpc0FjdGl2ZTogZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzTmFtZSwgZGVmYXVsdEFjdGl2YXRpb24pIHtcblx0XHRcdHZhciBubyA9ICduby0nICsgY2xhc3NOYW1lO1xuXG5cdFx0XHR3aGlsZSAoZWxlbWVudCkge1xuXHRcdFx0XHR2YXIgY2xhc3NMaXN0ID0gZWxlbWVudC5jbGFzc0xpc3Q7XG5cdFx0XHRcdGlmIChjbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjbGFzc0xpc3QuY29udGFpbnMobm8pKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gISFkZWZhdWx0QWN0aXZhdGlvbjtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIFRoaXMgbmFtZXNwYWNlIGNvbnRhaW5zIGFsbCBjdXJyZW50bHkgbG9hZGVkIGxhbmd1YWdlcyBhbmQgdGhlIHNvbWUgaGVscGVyIGZ1bmN0aW9ucyB0byBjcmVhdGUgYW5kIG1vZGlmeSBsYW5ndWFnZXMuXG5cdCAqXG5cdCAqIEBuYW1lc3BhY2Vcblx0ICogQG1lbWJlcm9mIFByaXNtXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdGxhbmd1YWdlczoge1xuXHRcdC8qKlxuXHRcdCAqIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgdGhlIGxhbmd1YWdlIHdpdGggdGhlIGdpdmVuIGlkIGFuZCBhcHBlbmRzIHRoZSBnaXZlbiB0b2tlbnMuXG5cdFx0ICpcblx0XHQgKiBJZiBhIHRva2VuIGluIGByZWRlZmAgYWxzbyBhcHBlYXJzIGluIHRoZSBjb3BpZWQgbGFuZ3VhZ2UsIHRoZW4gdGhlIGV4aXN0aW5nIHRva2VuIGluIHRoZSBjb3BpZWQgbGFuZ3VhZ2Vcblx0XHQgKiB3aWxsIGJlIG92ZXJ3cml0dGVuIGF0IGl0cyBvcmlnaW5hbCBwb3NpdGlvbi5cblx0XHQgKlxuXHRcdCAqICMjIEJlc3QgcHJhY3RpY2VzXG5cdFx0ICpcblx0XHQgKiBTaW5jZSB0aGUgcG9zaXRpb24gb2Ygb3ZlcndyaXRpbmcgdG9rZW5zICh0b2tlbiBpbiBgcmVkZWZgIHRoYXQgb3ZlcndyaXRlIHRva2VucyBpbiB0aGUgY29waWVkIGxhbmd1YWdlKVxuXHRcdCAqIGRvZXNuJ3QgbWF0dGVyLCB0aGV5IGNhbiB0ZWNobmljYWxseSBiZSBpbiBhbnkgb3JkZXIuIEhvd2V2ZXIsIHRoaXMgY2FuIGJlIGNvbmZ1c2luZyB0byBvdGhlcnMgdGhhdCB0cnlpbmcgdG9cblx0XHQgKiB1bmRlcnN0YW5kIHRoZSBsYW5ndWFnZSBkZWZpbml0aW9uIGJlY2F1c2UsIG5vcm1hbGx5LCB0aGUgb3JkZXIgb2YgdG9rZW5zIG1hdHRlcnMgaW4gUHJpc20gZ3JhbW1hcnMuXG5cdFx0ICpcblx0XHQgKiBUaGVyZWZvcmUsIGl0IGlzIGVuY291cmFnZWQgdG8gb3JkZXIgb3ZlcndyaXRpbmcgdG9rZW5zIGFjY29yZGluZyB0byB0aGUgcG9zaXRpb25zIG9mIHRoZSBvdmVyd3JpdHRlbiB0b2tlbnMuXG5cdFx0ICogRnVydGhlcm1vcmUsIGFsbCBub24tb3ZlcndyaXRpbmcgdG9rZW5zIHNob3VsZCBiZSBwbGFjZWQgYWZ0ZXIgdGhlIG92ZXJ3cml0aW5nIG9uZXMuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkIG9mIHRoZSBsYW5ndWFnZSB0byBleHRlbmQuIFRoaXMgaGFzIHRvIGJlIGEga2V5IGluIGBQcmlzbS5sYW5ndWFnZXNgLlxuXHRcdCAqIEBwYXJhbSB7R3JhbW1hcn0gcmVkZWYgVGhlIG5ldyB0b2tlbnMgdG8gYXBwZW5kLlxuXHRcdCAqIEByZXR1cm5zIHtHcmFtbWFyfSBUaGUgbmV3IGxhbmd1YWdlIGNyZWF0ZWQuXG5cdFx0ICogQHB1YmxpY1xuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogUHJpc20ubGFuZ3VhZ2VzWydjc3Mtd2l0aC1jb2xvcnMnXSA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NzcycsIHtcblx0XHQgKiAgICAgLy8gUHJpc20ubGFuZ3VhZ2VzLmNzcyBhbHJlYWR5IGhhcyBhICdjb21tZW50JyB0b2tlbiwgc28gdGhpcyB0b2tlbiB3aWxsIG92ZXJ3cml0ZSBDU1MnICdjb21tZW50JyB0b2tlblxuXHRcdCAqICAgICAvLyBhdCBpdHMgb3JpZ2luYWwgcG9zaXRpb25cblx0XHQgKiAgICAgJ2NvbW1lbnQnOiB7IC4uLiB9LFxuXHRcdCAqICAgICAvLyBDU1MgZG9lc24ndCBoYXZlIGEgJ2NvbG9yJyB0b2tlbiwgc28gdGhpcyB0b2tlbiB3aWxsIGJlIGFwcGVuZGVkXG5cdFx0ICogICAgICdjb2xvcic6IC9cXGIoPzpyZWR8Z3JlZW58Ymx1ZSlcXGIvXG5cdFx0ICogfSk7XG5cdFx0ICovXG5cdFx0ZXh0ZW5kOiBmdW5jdGlvbiAoaWQsIHJlZGVmKSB7XG5cdFx0XHR2YXIgbGFuZyA9IF8udXRpbC5jbG9uZShfLmxhbmd1YWdlc1tpZF0pO1xuXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gcmVkZWYpIHtcblx0XHRcdFx0bGFuZ1trZXldID0gcmVkZWZba2V5XTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGxhbmc7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEluc2VydHMgdG9rZW5zIF9iZWZvcmVfIGFub3RoZXIgdG9rZW4gaW4gYSBsYW5ndWFnZSBkZWZpbml0aW9uIG9yIGFueSBvdGhlciBncmFtbWFyLlxuXHRcdCAqXG5cdFx0ICogIyMgVXNhZ2Vcblx0XHQgKlxuXHRcdCAqIFRoaXMgaGVscGVyIG1ldGhvZCBtYWtlcyBpdCBlYXN5IHRvIG1vZGlmeSBleGlzdGluZyBsYW5ndWFnZXMuIEZvciBleGFtcGxlLCB0aGUgQ1NTIGxhbmd1YWdlIGRlZmluaXRpb25cblx0XHQgKiBub3Qgb25seSBkZWZpbmVzIENTUyBoaWdobGlnaHRpbmcgZm9yIENTUyBkb2N1bWVudHMsIGJ1dCBhbHNvIG5lZWRzIHRvIGRlZmluZSBoaWdobGlnaHRpbmcgZm9yIENTUyBlbWJlZGRlZFxuXHRcdCAqIGluIEhUTUwgdGhyb3VnaCBgPHN0eWxlPmAgZWxlbWVudHMuIFRvIGRvIHRoaXMsIGl0IG5lZWRzIHRvIG1vZGlmeSBgUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cGAgYW5kIGFkZCB0aGVcblx0XHQgKiBhcHByb3ByaWF0ZSB0b2tlbnMuIEhvd2V2ZXIsIGBQcmlzbS5sYW5ndWFnZXMubWFya3VwYCBpcyBhIHJlZ3VsYXIgSmF2YVNjcmlwdCBvYmplY3QgbGl0ZXJhbCwgc28gaWYgeW91IGRvXG5cdFx0ICogdGhpczpcblx0XHQgKlxuXHRcdCAqIGBgYGpzXG5cdFx0ICogUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC5zdHlsZSA9IHtcblx0XHQgKiAgICAgLy8gdG9rZW5cblx0XHQgKiB9O1xuXHRcdCAqIGBgYFxuXHRcdCAqXG5cdFx0ICogdGhlbiB0aGUgYHN0eWxlYCB0b2tlbiB3aWxsIGJlIGFkZGVkIChhbmQgcHJvY2Vzc2VkKSBhdCB0aGUgZW5kLiBgaW5zZXJ0QmVmb3JlYCBhbGxvd3MgeW91IHRvIGluc2VydCB0b2tlbnNcblx0XHQgKiBiZWZvcmUgZXhpc3RpbmcgdG9rZW5zLiBGb3IgdGhlIENTUyBleGFtcGxlIGFib3ZlLCB5b3Ugd291bGQgdXNlIGl0IGxpa2UgdGhpczpcblx0XHQgKlxuXHRcdCAqIGBgYGpzXG5cdFx0ICogUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnbWFya3VwJywgJ2NkYXRhJywge1xuXHRcdCAqICAgICAnc3R5bGUnOiB7XG5cdFx0ICogICAgICAgICAvLyB0b2tlblxuXHRcdCAqICAgICB9XG5cdFx0ICogfSk7XG5cdFx0ICogYGBgXG5cdFx0ICpcblx0XHQgKiAjIyBTcGVjaWFsIGNhc2VzXG5cdFx0ICpcblx0XHQgKiBJZiB0aGUgZ3JhbW1hcnMgb2YgYGluc2lkZWAgYW5kIGBpbnNlcnRgIGhhdmUgdG9rZW5zIHdpdGggdGhlIHNhbWUgbmFtZSwgdGhlIHRva2VucyBpbiBgaW5zaWRlYCdzIGdyYW1tYXJcblx0XHQgKiB3aWxsIGJlIGlnbm9yZWQuXG5cdFx0ICpcblx0XHQgKiBUaGlzIGJlaGF2aW9yIGNhbiBiZSB1c2VkIHRvIGluc2VydCB0b2tlbnMgYWZ0ZXIgYGJlZm9yZWA6XG5cdFx0ICpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ21hcmt1cCcsICdjb21tZW50Jywge1xuXHRcdCAqICAgICAnY29tbWVudCc6IFByaXNtLmxhbmd1YWdlcy5tYXJrdXAuY29tbWVudCxcblx0XHQgKiAgICAgLy8gdG9rZW5zIGFmdGVyICdjb21tZW50J1xuXHRcdCAqIH0pO1xuXHRcdCAqIGBgYFxuXHRcdCAqXG5cdFx0ICogIyMgTGltaXRhdGlvbnNcblx0XHQgKlxuXHRcdCAqIFRoZSBtYWluIHByb2JsZW0gYGluc2VydEJlZm9yZWAgaGFzIHRvIHNvbHZlIGlzIGl0ZXJhdGlvbiBvcmRlci4gU2luY2UgRVMyMDE1LCB0aGUgaXRlcmF0aW9uIG9yZGVyIGZvciBvYmplY3Rcblx0XHQgKiBwcm9wZXJ0aWVzIGlzIGd1YXJhbnRlZWQgdG8gYmUgdGhlIGluc2VydGlvbiBvcmRlciAoZXhjZXB0IGZvciBpbnRlZ2VyIGtleXMpIGJ1dCBzb21lIGJyb3dzZXJzIGJlaGF2ZVxuXHRcdCAqIGRpZmZlcmVudGx5IHdoZW4ga2V5cyBhcmUgZGVsZXRlZCBhbmQgcmUtaW5zZXJ0ZWQuIFNvIGBpbnNlcnRCZWZvcmVgIGNhbid0IGJlIGltcGxlbWVudGVkIGJ5IHRlbXBvcmFyaWx5XG5cdFx0ICogZGVsZXRpbmcgcHJvcGVydGllcyB3aGljaCBpcyBuZWNlc3NhcnkgdG8gaW5zZXJ0IGF0IGFyYml0cmFyeSBwb3NpdGlvbnMuXG5cdFx0ICpcblx0XHQgKiBUbyBzb2x2ZSB0aGlzIHByb2JsZW0sIGBpbnNlcnRCZWZvcmVgIGRvZXNuJ3QgYWN0dWFsbHkgaW5zZXJ0IHRoZSBnaXZlbiB0b2tlbnMgaW50byB0aGUgdGFyZ2V0IG9iamVjdC5cblx0XHQgKiBJbnN0ZWFkLCBpdCB3aWxsIGNyZWF0ZSBhIG5ldyBvYmplY3QgYW5kIHJlcGxhY2UgYWxsIHJlZmVyZW5jZXMgdG8gdGhlIHRhcmdldCBvYmplY3Qgd2l0aCB0aGUgbmV3IG9uZS4gVGhpc1xuXHRcdCAqIGNhbiBiZSBkb25lIHdpdGhvdXQgdGVtcG9yYXJpbHkgZGVsZXRpbmcgcHJvcGVydGllcywgc28gdGhlIGl0ZXJhdGlvbiBvcmRlciBpcyB3ZWxsLWRlZmluZWQuXG5cdFx0ICpcblx0XHQgKiBIb3dldmVyLCBvbmx5IHJlZmVyZW5jZXMgdGhhdCBjYW4gYmUgcmVhY2hlZCBmcm9tIGBQcmlzbS5sYW5ndWFnZXNgIG9yIGBpbnNlcnRgIHdpbGwgYmUgcmVwbGFjZWQuIEkuZS4gaWZcblx0XHQgKiB5b3UgaG9sZCB0aGUgdGFyZ2V0IG9iamVjdCBpbiBhIHZhcmlhYmxlLCB0aGVuIHRoZSB2YWx1ZSBvZiB0aGUgdmFyaWFibGUgd2lsbCBub3QgY2hhbmdlLlxuXHRcdCAqXG5cdFx0ICogYGBganNcblx0XHQgKiB2YXIgb2xkTWFya3VwID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cDtcblx0XHQgKiB2YXIgbmV3TWFya3VwID0gUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnbWFya3VwJywgJ2NvbW1lbnQnLCB7IC4uLiB9KTtcblx0XHQgKlxuXHRcdCAqIGFzc2VydChvbGRNYXJrdXAgIT09IFByaXNtLmxhbmd1YWdlcy5tYXJrdXApO1xuXHRcdCAqIGFzc2VydChuZXdNYXJrdXAgPT09IFByaXNtLmxhbmd1YWdlcy5tYXJrdXApO1xuXHRcdCAqIGBgYFxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IGluc2lkZSBUaGUgcHJvcGVydHkgb2YgYHJvb3RgIChlLmcuIGEgbGFuZ3VhZ2UgaWQgaW4gYFByaXNtLmxhbmd1YWdlc2ApIHRoYXQgY29udGFpbnMgdGhlXG5cdFx0ICogb2JqZWN0IHRvIGJlIG1vZGlmaWVkLlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBiZWZvcmUgVGhlIGtleSB0byBpbnNlcnQgYmVmb3JlLlxuXHRcdCAqIEBwYXJhbSB7R3JhbW1hcn0gaW5zZXJ0IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBrZXktdmFsdWUgcGFpcnMgdG8gYmUgaW5zZXJ0ZWQuXG5cdFx0ICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBbcm9vdF0gVGhlIG9iamVjdCBjb250YWluaW5nIGBpbnNpZGVgLCBpLmUuIHRoZSBvYmplY3QgdGhhdCBjb250YWlucyB0aGVcblx0XHQgKiBvYmplY3QgdG8gYmUgbW9kaWZpZWQuXG5cdFx0ICpcblx0XHQgKiBEZWZhdWx0cyB0byBgUHJpc20ubGFuZ3VhZ2VzYC5cblx0XHQgKiBAcmV0dXJucyB7R3JhbW1hcn0gVGhlIG5ldyBncmFtbWFyIG9iamVjdC5cblx0XHQgKiBAcHVibGljXG5cdFx0ICovXG5cdFx0aW5zZXJ0QmVmb3JlOiBmdW5jdGlvbiAoaW5zaWRlLCBiZWZvcmUsIGluc2VydCwgcm9vdCkge1xuXHRcdFx0cm9vdCA9IHJvb3QgfHwgLyoqIEB0eXBlIHthbnl9ICovIChfLmxhbmd1YWdlcyk7XG5cdFx0XHR2YXIgZ3JhbW1hciA9IHJvb3RbaW5zaWRlXTtcblx0XHRcdC8qKiBAdHlwZSB7R3JhbW1hcn0gKi9cblx0XHRcdHZhciByZXQgPSB7fTtcblxuXHRcdFx0Zm9yICh2YXIgdG9rZW4gaW4gZ3JhbW1hcikge1xuXHRcdFx0XHRpZiAoZ3JhbW1hci5oYXNPd25Qcm9wZXJ0eSh0b2tlbikpIHtcblxuXHRcdFx0XHRcdGlmICh0b2tlbiA9PSBiZWZvcmUpIHtcblx0XHRcdFx0XHRcdGZvciAodmFyIG5ld1Rva2VuIGluIGluc2VydCkge1xuXHRcdFx0XHRcdFx0XHRpZiAoaW5zZXJ0Lmhhc093blByb3BlcnR5KG5ld1Rva2VuKSkge1xuXHRcdFx0XHRcdFx0XHRcdHJldFtuZXdUb2tlbl0gPSBpbnNlcnRbbmV3VG9rZW5dO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRG8gbm90IGluc2VydCB0b2tlbiB3aGljaCBhbHNvIG9jY3VyIGluIGluc2VydC4gU2VlICMxNTI1XG5cdFx0XHRcdFx0aWYgKCFpbnNlcnQuaGFzT3duUHJvcGVydHkodG9rZW4pKSB7XG5cdFx0XHRcdFx0XHRyZXRbdG9rZW5dID0gZ3JhbW1hclt0b2tlbl07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHZhciBvbGQgPSByb290W2luc2lkZV07XG5cdFx0XHRyb290W2luc2lkZV0gPSByZXQ7XG5cblx0XHRcdC8vIFVwZGF0ZSByZWZlcmVuY2VzIGluIG90aGVyIGxhbmd1YWdlIGRlZmluaXRpb25zXG5cdFx0XHRfLmxhbmd1YWdlcy5ERlMoXy5sYW5ndWFnZXMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0XHRcdFx0aWYgKHZhbHVlID09PSBvbGQgJiYga2V5ICE9IGluc2lkZSkge1xuXHRcdFx0XHRcdHRoaXNba2V5XSA9IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSxcblxuXHRcdC8vIFRyYXZlcnNlIGEgbGFuZ3VhZ2UgZGVmaW5pdGlvbiB3aXRoIERlcHRoIEZpcnN0IFNlYXJjaFxuXHRcdERGUzogZnVuY3Rpb24gREZTKG8sIGNhbGxiYWNrLCB0eXBlLCB2aXNpdGVkKSB7XG5cdFx0XHR2aXNpdGVkID0gdmlzaXRlZCB8fCB7fTtcblxuXHRcdFx0dmFyIG9iaklkID0gXy51dGlsLm9iaklkO1xuXG5cdFx0XHRmb3IgKHZhciBpIGluIG8pIHtcblx0XHRcdFx0aWYgKG8uaGFzT3duUHJvcGVydHkoaSkpIHtcblx0XHRcdFx0XHRjYWxsYmFjay5jYWxsKG8sIGksIG9baV0sIHR5cGUgfHwgaSk7XG5cblx0XHRcdFx0XHR2YXIgcHJvcGVydHkgPSBvW2ldLFxuXHRcdFx0XHRcdCAgICBwcm9wZXJ0eVR5cGUgPSBfLnV0aWwudHlwZShwcm9wZXJ0eSk7XG5cblx0XHRcdFx0XHRpZiAocHJvcGVydHlUeXBlID09PSAnT2JqZWN0JyAmJiAhdmlzaXRlZFtvYmpJZChwcm9wZXJ0eSldKSB7XG5cdFx0XHRcdFx0XHR2aXNpdGVkW29iaklkKHByb3BlcnR5KV0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0REZTKHByb3BlcnR5LCBjYWxsYmFjaywgbnVsbCwgdmlzaXRlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKHByb3BlcnR5VHlwZSA9PT0gJ0FycmF5JyAmJiAhdmlzaXRlZFtvYmpJZChwcm9wZXJ0eSldKSB7XG5cdFx0XHRcdFx0XHR2aXNpdGVkW29iaklkKHByb3BlcnR5KV0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0REZTKHByb3BlcnR5LCBjYWxsYmFjaywgaSwgdmlzaXRlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHBsdWdpbnM6IHt9LFxuXG5cdC8qKlxuXHQgKiBUaGlzIGlzIHRoZSBtb3N0IGhpZ2gtbGV2ZWwgZnVuY3Rpb24gaW4gUHJpc23igJlzIEFQSS5cblx0ICogSXQgZmV0Y2hlcyBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIGAubGFuZ3VhZ2UteHh4eGAgY2xhc3MgYW5kIHRoZW4gY2FsbHMge0BsaW5rIFByaXNtLmhpZ2hsaWdodEVsZW1lbnR9IG9uXG5cdCAqIGVhY2ggb25lIG9mIHRoZW0uXG5cdCAqXG5cdCAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byBgUHJpc20uaGlnaGxpZ2h0QWxsVW5kZXIoZG9jdW1lbnQsIGFzeW5jLCBjYWxsYmFjaylgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFthc3luYz1mYWxzZV0gU2FtZSBhcyBpbiB7QGxpbmsgUHJpc20uaGlnaGxpZ2h0QWxsVW5kZXJ9LlxuXHQgKiBAcGFyYW0ge0hpZ2hsaWdodENhbGxiYWNrfSBbY2FsbGJhY2tdIFNhbWUgYXMgaW4ge0BsaW5rIFByaXNtLmhpZ2hsaWdodEFsbFVuZGVyfS5cblx0ICogQG1lbWJlcm9mIFByaXNtXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdGhpZ2hsaWdodEFsbDogZnVuY3Rpb24oYXN5bmMsIGNhbGxiYWNrKSB7XG5cdFx0Xy5oaWdobGlnaHRBbGxVbmRlcihkb2N1bWVudCwgYXN5bmMsIGNhbGxiYWNrKTtcblx0fSxcblxuXHQvKipcblx0ICogRmV0Y2hlcyBhbGwgdGhlIGRlc2NlbmRhbnRzIG9mIGBjb250YWluZXJgIHRoYXQgaGF2ZSBhIGAubGFuZ3VhZ2UteHh4eGAgY2xhc3MgYW5kIHRoZW4gY2FsbHNcblx0ICoge0BsaW5rIFByaXNtLmhpZ2hsaWdodEVsZW1lbnR9IG9uIGVhY2ggb25lIG9mIHRoZW0uXG5cdCAqXG5cdCAqIFRoZSBmb2xsb3dpbmcgaG9va3Mgd2lsbCBiZSBydW46XG5cdCAqIDEuIGBiZWZvcmUtaGlnaGxpZ2h0YWxsYFxuXHQgKiAyLiBBbGwgaG9va3Mgb2Yge0BsaW5rIFByaXNtLmhpZ2hsaWdodEVsZW1lbnR9IGZvciBlYWNoIGVsZW1lbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UGFyZW50Tm9kZX0gY29udGFpbmVyIFRoZSByb290IGVsZW1lbnQsIHdob3NlIGRlc2NlbmRhbnRzIHRoYXQgaGF2ZSBhIGAubGFuZ3VhZ2UteHh4eGAgY2xhc3Mgd2lsbCBiZSBoaWdobGlnaHRlZC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbYXN5bmM9ZmFsc2VdIFdoZXRoZXIgZWFjaCBlbGVtZW50IGlzIHRvIGJlIGhpZ2hsaWdodGVkIGFzeW5jaHJvbm91c2x5IHVzaW5nIFdlYiBXb3JrZXJzLlxuXHQgKiBAcGFyYW0ge0hpZ2hsaWdodENhbGxiYWNrfSBbY2FsbGJhY2tdIEFuIG9wdGlvbmFsIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZWFjaCBlbGVtZW50IGFmdGVyIGl0cyBoaWdobGlnaHRpbmcgaXMgZG9uZS5cblx0ICogQG1lbWJlcm9mIFByaXNtXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdGhpZ2hsaWdodEFsbFVuZGVyOiBmdW5jdGlvbihjb250YWluZXIsIGFzeW5jLCBjYWxsYmFjaykge1xuXHRcdHZhciBlbnYgPSB7XG5cdFx0XHRjYWxsYmFjazogY2FsbGJhY2ssXG5cdFx0XHRjb250YWluZXI6IGNvbnRhaW5lcixcblx0XHRcdHNlbGVjdG9yOiAnY29kZVtjbGFzcyo9XCJsYW5ndWFnZS1cIl0sIFtjbGFzcyo9XCJsYW5ndWFnZS1cIl0gY29kZSwgY29kZVtjbGFzcyo9XCJsYW5nLVwiXSwgW2NsYXNzKj1cImxhbmctXCJdIGNvZGUnXG5cdFx0fTtcblxuXHRcdF8uaG9va3MucnVuKCdiZWZvcmUtaGlnaGxpZ2h0YWxsJywgZW52KTtcblxuXHRcdGVudi5lbGVtZW50cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShlbnYuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoZW52LnNlbGVjdG9yKSk7XG5cblx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLWFsbC1lbGVtZW50cy1oaWdobGlnaHQnLCBlbnYpO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGVsZW1lbnQ7IGVsZW1lbnQgPSBlbnYuZWxlbWVudHNbaSsrXTspIHtcblx0XHRcdF8uaGlnaGxpZ2h0RWxlbWVudChlbGVtZW50LCBhc3luYyA9PT0gdHJ1ZSwgZW52LmNhbGxiYWNrKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEhpZ2hsaWdodHMgdGhlIGNvZGUgaW5zaWRlIGEgc2luZ2xlIGVsZW1lbnQuXG5cdCAqXG5cdCAqIFRoZSBmb2xsb3dpbmcgaG9va3Mgd2lsbCBiZSBydW46XG5cdCAqIDEuIGBiZWZvcmUtc2FuaXR5LWNoZWNrYFxuXHQgKiAyLiBgYmVmb3JlLWhpZ2hsaWdodGBcblx0ICogMy4gQWxsIGhvb2tzIG9mIHtAbGluayBQcmlzbS5oaWdobGlnaHR9LiBUaGVzZSBob29rcyB3aWxsIG9ubHkgYmUgcnVuIGJ5IHRoZSBjdXJyZW50IHdvcmtlciBpZiBgYXN5bmNgIGlzIGB0cnVlYC5cblx0ICogNC4gYGJlZm9yZS1pbnNlcnRgXG5cdCAqIDUuIGBhZnRlci1oaWdobGlnaHRgXG5cdCAqIDYuIGBjb21wbGV0ZWBcblx0ICpcblx0ICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIGNvZGUuXG5cdCAqIEl0IG11c3QgaGF2ZSBhIGNsYXNzIG9mIGBsYW5ndWFnZS14eHh4YCB0byBiZSBwcm9jZXNzZWQsIHdoZXJlIGB4eHh4YCBpcyBhIHZhbGlkIGxhbmd1YWdlIGlkZW50aWZpZXIuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FzeW5jPWZhbHNlXSBXaGV0aGVyIHRoZSBlbGVtZW50IGlzIHRvIGJlIGhpZ2hsaWdodGVkIGFzeW5jaHJvbm91c2x5IHVzaW5nIFdlYiBXb3JrZXJzXG5cdCAqIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UgYW5kIGF2b2lkIGJsb2NraW5nIHRoZSBVSSB3aGVuIGhpZ2hsaWdodGluZyB2ZXJ5IGxhcmdlIGNodW5rcyBvZiBjb2RlLiBUaGlzIG9wdGlvbiBpc1xuXHQgKiBbZGlzYWJsZWQgYnkgZGVmYXVsdF0oaHR0cHM6Ly9wcmlzbWpzLmNvbS9mYXEuaHRtbCN3aHktaXMtYXN5bmNocm9ub3VzLWhpZ2hsaWdodGluZy1kaXNhYmxlZC1ieS1kZWZhdWx0KS5cblx0ICpcblx0ICogTm90ZTogQWxsIGxhbmd1YWdlIGRlZmluaXRpb25zIHJlcXVpcmVkIHRvIGhpZ2hsaWdodCB0aGUgY29kZSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSBtYWluIGBwcmlzbS5qc2AgZmlsZSBmb3Jcblx0ICogYXN5bmNocm9ub3VzIGhpZ2hsaWdodGluZyB0byB3b3JrLiBZb3UgY2FuIGJ1aWxkIHlvdXIgb3duIGJ1bmRsZSBvbiB0aGVcblx0ICogW0Rvd25sb2FkIHBhZ2VdKGh0dHBzOi8vcHJpc21qcy5jb20vZG93bmxvYWQuaHRtbCkuXG5cdCAqIEBwYXJhbSB7SGlnaGxpZ2h0Q2FsbGJhY2t9IFtjYWxsYmFja10gQW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBhZnRlciB0aGUgaGlnaGxpZ2h0aW5nIGlzIGRvbmUuXG5cdCAqIE1vc3RseSB1c2VmdWwgd2hlbiBgYXN5bmNgIGlzIGB0cnVlYCwgc2luY2UgaW4gdGhhdCBjYXNlLCB0aGUgaGlnaGxpZ2h0aW5nIGlzIGRvbmUgYXN5bmNocm9ub3VzbHkuXG5cdCAqIEBtZW1iZXJvZiBQcmlzbVxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRoaWdobGlnaHRFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50LCBhc3luYywgY2FsbGJhY2spIHtcblx0XHQvLyBGaW5kIGxhbmd1YWdlXG5cdFx0dmFyIGxhbmd1YWdlID0gXy51dGlsLmdldExhbmd1YWdlKGVsZW1lbnQpO1xuXHRcdHZhciBncmFtbWFyID0gXy5sYW5ndWFnZXNbbGFuZ3VhZ2VdO1xuXG5cdFx0Ly8gU2V0IGxhbmd1YWdlIG9uIHRoZSBlbGVtZW50LCBpZiBub3QgcHJlc2VudFxuXHRcdGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShsYW5nLCAnJykucmVwbGFjZSgvXFxzKy9nLCAnICcpICsgJyBsYW5ndWFnZS0nICsgbGFuZ3VhZ2U7XG5cblx0XHQvLyBTZXQgbGFuZ3VhZ2Ugb24gdGhlIHBhcmVudCwgZm9yIHN0eWxpbmdcblx0XHR2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuXHRcdGlmIChwYXJlbnQgJiYgcGFyZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdwcmUnKSB7XG5cdFx0XHRwYXJlbnQuY2xhc3NOYW1lID0gcGFyZW50LmNsYXNzTmFtZS5yZXBsYWNlKGxhbmcsICcnKS5yZXBsYWNlKC9cXHMrL2csICcgJykgKyAnIGxhbmd1YWdlLScgKyBsYW5ndWFnZTtcblx0XHR9XG5cblx0XHR2YXIgY29kZSA9IGVsZW1lbnQudGV4dENvbnRlbnQ7XG5cblx0XHR2YXIgZW52ID0ge1xuXHRcdFx0ZWxlbWVudDogZWxlbWVudCxcblx0XHRcdGxhbmd1YWdlOiBsYW5ndWFnZSxcblx0XHRcdGdyYW1tYXI6IGdyYW1tYXIsXG5cdFx0XHRjb2RlOiBjb2RlXG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGluc2VydEhpZ2hsaWdodGVkQ29kZShoaWdobGlnaHRlZENvZGUpIHtcblx0XHRcdGVudi5oaWdobGlnaHRlZENvZGUgPSBoaWdobGlnaHRlZENvZGU7XG5cblx0XHRcdF8uaG9va3MucnVuKCdiZWZvcmUtaW5zZXJ0JywgZW52KTtcblxuXHRcdFx0ZW52LmVsZW1lbnQuaW5uZXJIVE1MID0gZW52LmhpZ2hsaWdodGVkQ29kZTtcblxuXHRcdFx0Xy5ob29rcy5ydW4oJ2FmdGVyLWhpZ2hsaWdodCcsIGVudik7XG5cdFx0XHRfLmhvb2tzLnJ1bignY29tcGxldGUnLCBlbnYpO1xuXHRcdFx0Y2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbChlbnYuZWxlbWVudCk7XG5cdFx0fVxuXG5cdFx0Xy5ob29rcy5ydW4oJ2JlZm9yZS1zYW5pdHktY2hlY2snLCBlbnYpO1xuXG5cdFx0aWYgKCFlbnYuY29kZSkge1xuXHRcdFx0Xy5ob29rcy5ydW4oJ2NvbXBsZXRlJywgZW52KTtcblx0XHRcdGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwoZW52LmVsZW1lbnQpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdF8uaG9va3MucnVuKCdiZWZvcmUtaGlnaGxpZ2h0JywgZW52KTtcblxuXHRcdGlmICghZW52LmdyYW1tYXIpIHtcblx0XHRcdGluc2VydEhpZ2hsaWdodGVkQ29kZShfLnV0aWwuZW5jb2RlKGVudi5jb2RlKSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGFzeW5jICYmIF9zZWxmLldvcmtlcikge1xuXHRcdFx0dmFyIHdvcmtlciA9IG5ldyBXb3JrZXIoXy5maWxlbmFtZSk7XG5cblx0XHRcdHdvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldnQpIHtcblx0XHRcdFx0aW5zZXJ0SGlnaGxpZ2h0ZWRDb2RlKGV2dC5kYXRhKTtcblx0XHRcdH07XG5cblx0XHRcdHdvcmtlci5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRcdGxhbmd1YWdlOiBlbnYubGFuZ3VhZ2UsXG5cdFx0XHRcdGNvZGU6IGVudi5jb2RlLFxuXHRcdFx0XHRpbW1lZGlhdGVDbG9zZTogdHJ1ZVxuXHRcdFx0fSkpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGluc2VydEhpZ2hsaWdodGVkQ29kZShfLmhpZ2hsaWdodChlbnYuY29kZSwgZW52LmdyYW1tYXIsIGVudi5sYW5ndWFnZSkpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogTG93LWxldmVsIGZ1bmN0aW9uLCBvbmx5IHVzZSBpZiB5b3Uga25vdyB3aGF0IHlvdeKAmXJlIGRvaW5nLiBJdCBhY2NlcHRzIGEgc3RyaW5nIG9mIHRleHQgYXMgaW5wdXRcblx0ICogYW5kIHRoZSBsYW5ndWFnZSBkZWZpbml0aW9ucyB0byB1c2UsIGFuZCByZXR1cm5zIGEgc3RyaW5nIHdpdGggdGhlIEhUTUwgcHJvZHVjZWQuXG5cdCAqXG5cdCAqIFRoZSBmb2xsb3dpbmcgaG9va3Mgd2lsbCBiZSBydW46XG5cdCAqIDEuIGBiZWZvcmUtdG9rZW5pemVgXG5cdCAqIDIuIGBhZnRlci10b2tlbml6ZWBcblx0ICogMy4gYHdyYXBgOiBPbiBlYWNoIHtAbGluayBUb2tlbn0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IEEgc3RyaW5nIHdpdGggdGhlIGNvZGUgdG8gYmUgaGlnaGxpZ2h0ZWQuXG5cdCAqIEBwYXJhbSB7R3JhbW1hcn0gZ3JhbW1hciBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgdG9rZW5zIHRvIHVzZS5cblx0ICpcblx0ICogVXN1YWxseSBhIGxhbmd1YWdlIGRlZmluaXRpb24gbGlrZSBgUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cGAuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZSBUaGUgbmFtZSBvZiB0aGUgbGFuZ3VhZ2UgZGVmaW5pdGlvbiBwYXNzZWQgdG8gYGdyYW1tYXJgLlxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgaGlnaGxpZ2h0ZWQgSFRNTC5cblx0ICogQG1lbWJlcm9mIFByaXNtXG5cdCAqIEBwdWJsaWNcblx0ICogQGV4YW1wbGVcblx0ICogUHJpc20uaGlnaGxpZ2h0KCd2YXIgZm9vID0gdHJ1ZTsnLCBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCwgJ2phdmFzY3JpcHQnKTtcblx0ICovXG5cdGhpZ2hsaWdodDogZnVuY3Rpb24gKHRleHQsIGdyYW1tYXIsIGxhbmd1YWdlKSB7XG5cdFx0dmFyIGVudiA9IHtcblx0XHRcdGNvZGU6IHRleHQsXG5cdFx0XHRncmFtbWFyOiBncmFtbWFyLFxuXHRcdFx0bGFuZ3VhZ2U6IGxhbmd1YWdlXG5cdFx0fTtcblx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLXRva2VuaXplJywgZW52KTtcblx0XHRlbnYudG9rZW5zID0gXy50b2tlbml6ZShlbnYuY29kZSwgZW52LmdyYW1tYXIpO1xuXHRcdF8uaG9va3MucnVuKCdhZnRlci10b2tlbml6ZScsIGVudik7XG5cdFx0cmV0dXJuIFRva2VuLnN0cmluZ2lmeShfLnV0aWwuZW5jb2RlKGVudi50b2tlbnMpLCBlbnYubGFuZ3VhZ2UpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBUaGlzIGlzIHRoZSBoZWFydCBvZiBQcmlzbSwgYW5kIHRoZSBtb3N0IGxvdy1sZXZlbCBmdW5jdGlvbiB5b3UgY2FuIHVzZS4gSXQgYWNjZXB0cyBhIHN0cmluZyBvZiB0ZXh0IGFzIGlucHV0XG5cdCAqIGFuZCB0aGUgbGFuZ3VhZ2UgZGVmaW5pdGlvbnMgdG8gdXNlLCBhbmQgcmV0dXJucyBhbiBhcnJheSB3aXRoIHRoZSB0b2tlbml6ZWQgY29kZS5cblx0ICpcblx0ICogV2hlbiB0aGUgbGFuZ3VhZ2UgZGVmaW5pdGlvbiBpbmNsdWRlcyBuZXN0ZWQgdG9rZW5zLCB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIHJlY3Vyc2l2ZWx5IG9uIGVhY2ggb2YgdGhlc2UgdG9rZW5zLlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjb3VsZCBiZSB1c2VmdWwgaW4gb3RoZXIgY29udGV4dHMgYXMgd2VsbCwgYXMgYSB2ZXJ5IGNydWRlIHBhcnNlci5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHQgQSBzdHJpbmcgd2l0aCB0aGUgY29kZSB0byBiZSBoaWdobGlnaHRlZC5cblx0ICogQHBhcmFtIHtHcmFtbWFyfSBncmFtbWFyIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSB0b2tlbnMgdG8gdXNlLlxuXHQgKlxuXHQgKiBVc3VhbGx5IGEgbGFuZ3VhZ2UgZGVmaW5pdGlvbiBsaWtlIGBQcmlzbS5sYW5ndWFnZXMubWFya3VwYC5cblx0ICogQHJldHVybnMge1Rva2VuU3RyZWFtfSBBbiBhcnJheSBvZiBzdHJpbmdzIGFuZCB0b2tlbnMsIGEgdG9rZW4gc3RyZWFtLlxuXHQgKiBAbWVtYmVyb2YgUHJpc21cblx0ICogQHB1YmxpY1xuXHQgKiBAZXhhbXBsZVxuXHQgKiBsZXQgY29kZSA9IGB2YXIgZm9vID0gMDtgO1xuXHQgKiBsZXQgdG9rZW5zID0gUHJpc20udG9rZW5pemUoY29kZSwgUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQpO1xuXHQgKiB0b2tlbnMuZm9yRWFjaCh0b2tlbiA9PiB7XG5cdCAqICAgICBpZiAodG9rZW4gaW5zdGFuY2VvZiBQcmlzbS5Ub2tlbiAmJiB0b2tlbi50eXBlID09PSAnbnVtYmVyJykge1xuXHQgKiAgICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCBudW1lcmljIGxpdGVyYWw6ICR7dG9rZW4uY29udGVudH1gKTtcblx0ICogICAgIH1cblx0ICogfSk7XG5cdCAqL1xuXHR0b2tlbml6ZTogZnVuY3Rpb24odGV4dCwgZ3JhbW1hcikge1xuXHRcdHZhciByZXN0ID0gZ3JhbW1hci5yZXN0O1xuXHRcdGlmIChyZXN0KSB7XG5cdFx0XHRmb3IgKHZhciB0b2tlbiBpbiByZXN0KSB7XG5cdFx0XHRcdGdyYW1tYXJbdG9rZW5dID0gcmVzdFt0b2tlbl07XG5cdFx0XHR9XG5cblx0XHRcdGRlbGV0ZSBncmFtbWFyLnJlc3Q7XG5cdFx0fVxuXG5cdFx0dmFyIHRva2VuTGlzdCA9IG5ldyBMaW5rZWRMaXN0KCk7XG5cdFx0YWRkQWZ0ZXIodG9rZW5MaXN0LCB0b2tlbkxpc3QuaGVhZCwgdGV4dCk7XG5cblx0XHRtYXRjaEdyYW1tYXIodGV4dCwgdG9rZW5MaXN0LCBncmFtbWFyLCB0b2tlbkxpc3QuaGVhZCwgMCk7XG5cblx0XHRyZXR1cm4gdG9BcnJheSh0b2tlbkxpc3QpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAbmFtZXNwYWNlXG5cdCAqIEBtZW1iZXJvZiBQcmlzbVxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRob29rczoge1xuXHRcdGFsbDoge30sXG5cblx0XHQvKipcblx0XHQgKiBBZGRzIHRoZSBnaXZlbiBjYWxsYmFjayB0byB0aGUgbGlzdCBvZiBjYWxsYmFja3MgZm9yIHRoZSBnaXZlbiBob29rLlxuXHRcdCAqXG5cdFx0ICogVGhlIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBob29rIGl0IGlzIHJlZ2lzdGVyZWQgZm9yIGlzIHJ1bi5cblx0XHQgKiBIb29rcyBhcmUgdXN1YWxseSBkaXJlY3RseSBydW4gYnkgYSBoaWdobGlnaHQgZnVuY3Rpb24gYnV0IHlvdSBjYW4gYWxzbyBydW4gaG9va3MgeW91cnNlbGYuXG5cdFx0ICpcblx0XHQgKiBPbmUgY2FsbGJhY2sgZnVuY3Rpb24gY2FuIGJlIHJlZ2lzdGVyZWQgdG8gbXVsdGlwbGUgaG9va3MgYW5kIHRoZSBzYW1lIGhvb2sgbXVsdGlwbGUgdGltZXMuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaG9vay5cblx0XHQgKiBAcGFyYW0ge0hvb2tDYWxsYmFja30gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIGlzIGdpdmVuIGVudmlyb25tZW50IHZhcmlhYmxlcy5cblx0XHQgKiBAcHVibGljXG5cdFx0ICovXG5cdFx0YWRkOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcblx0XHRcdHZhciBob29rcyA9IF8uaG9va3MuYWxsO1xuXG5cdFx0XHRob29rc1tuYW1lXSA9IGhvb2tzW25hbWVdIHx8IFtdO1xuXG5cdFx0XHRob29rc1tuYW1lXS5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUnVucyBhIGhvb2sgaW52b2tpbmcgYWxsIHJlZ2lzdGVyZWQgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGVudmlyb25tZW50IHZhcmlhYmxlcy5cblx0XHQgKlxuXHRcdCAqIENhbGxiYWNrcyB3aWxsIGJlIGludm9rZWQgc3luY2hyb25vdXNseSBhbmQgaW4gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgd2VyZSByZWdpc3RlcmVkLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGhvb2suXG5cdFx0ICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBlbnYgVGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyBvZiB0aGUgaG9vayBwYXNzZWQgdG8gYWxsIGNhbGxiYWNrcyByZWdpc3RlcmVkLlxuXHRcdCAqIEBwdWJsaWNcblx0XHQgKi9cblx0XHRydW46IGZ1bmN0aW9uIChuYW1lLCBlbnYpIHtcblx0XHRcdHZhciBjYWxsYmFja3MgPSBfLmhvb2tzLmFsbFtuYW1lXTtcblxuXHRcdFx0aWYgKCFjYWxsYmFja3MgfHwgIWNhbGxiYWNrcy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKHZhciBpPTAsIGNhbGxiYWNrOyBjYWxsYmFjayA9IGNhbGxiYWNrc1tpKytdOykge1xuXHRcdFx0XHRjYWxsYmFjayhlbnYpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRUb2tlbjogVG9rZW5cbn07XG5fc2VsZi5QcmlzbSA9IF87XG5cblxuLy8gVHlwZXNjcmlwdCBub3RlOlxuLy8gVGhlIGZvbGxvd2luZyBjYW4gYmUgdXNlZCB0byBpbXBvcnQgdGhlIFRva2VuIHR5cGUgaW4gSlNEb2M6XG4vL1xuLy8gICBAdHlwZWRlZiB7SW5zdGFuY2VUeXBlPGltcG9ydChcIi4vcHJpc20tY29yZVwiKVtcIlRva2VuXCJdPn0gVG9rZW5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRva2VuLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFNlZSB7QGxpbmsgVG9rZW4jdHlwZSB0eXBlfVxuICogQHBhcmFtIHtzdHJpbmcgfCBUb2tlblN0cmVhbX0gY29udGVudCBTZWUge0BsaW5rIFRva2VuI2NvbnRlbnQgY29udGVudH1cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbYWxpYXNdIFRoZSBhbGlhcyhlcykgb2YgdGhlIHRva2VuLlxuICogQHBhcmFtIHtzdHJpbmd9IFttYXRjaGVkU3RyPVwiXCJdIEEgY29weSBvZiB0aGUgZnVsbCBzdHJpbmcgdGhpcyB0b2tlbiB3YXMgY3JlYXRlZCBmcm9tLlxuICogQGNsYXNzXG4gKiBAZ2xvYmFsXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIFRva2VuKHR5cGUsIGNvbnRlbnQsIGFsaWFzLCBtYXRjaGVkU3RyKSB7XG5cdC8qKlxuXHQgKiBUaGUgdHlwZSBvZiB0aGUgdG9rZW4uXG5cdCAqXG5cdCAqIFRoaXMgaXMgdXN1YWxseSB0aGUga2V5IG9mIGEgcGF0dGVybiBpbiBhIHtAbGluayBHcmFtbWFyfS5cblx0ICpcblx0ICogQHR5cGUge3N0cmluZ31cblx0ICogQHNlZSBHcmFtbWFyVG9rZW5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0dGhpcy50eXBlID0gdHlwZTtcblx0LyoqXG5cdCAqIFRoZSBzdHJpbmdzIG9yIHRva2VucyBjb250YWluZWQgYnkgdGhpcyB0b2tlbi5cblx0ICpcblx0ICogVGhpcyB3aWxsIGJlIGEgdG9rZW4gc3RyZWFtIGlmIHRoZSBwYXR0ZXJuIG1hdGNoZWQgYWxzbyBkZWZpbmVkIGFuIGBpbnNpZGVgIGdyYW1tYXIuXG5cdCAqXG5cdCAqIEB0eXBlIHtzdHJpbmcgfCBUb2tlblN0cmVhbX1cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0dGhpcy5jb250ZW50ID0gY29udGVudDtcblx0LyoqXG5cdCAqIFRoZSBhbGlhcyhlcykgb2YgdGhlIHRva2VuLlxuXHQgKlxuXHQgKiBAdHlwZSB7c3RyaW5nfHN0cmluZ1tdfVxuXHQgKiBAc2VlIEdyYW1tYXJUb2tlblxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHR0aGlzLmFsaWFzID0gYWxpYXM7XG5cdC8vIENvcHkgb2YgdGhlIGZ1bGwgc3RyaW5nIHRoaXMgdG9rZW4gd2FzIGNyZWF0ZWQgZnJvbVxuXHR0aGlzLmxlbmd0aCA9IChtYXRjaGVkU3RyIHx8ICcnKS5sZW5ndGggfCAwO1xufVxuXG4vKipcbiAqIEEgdG9rZW4gc3RyZWFtIGlzIGFuIGFycmF5IG9mIHN0cmluZ3MgYW5kIHtAbGluayBUb2tlbiBUb2tlbn0gb2JqZWN0cy5cbiAqXG4gKiBUb2tlbiBzdHJlYW1zIGhhdmUgdG8gZnVsZmlsbCBhIGZldyBwcm9wZXJ0aWVzIHRoYXQgYXJlIGFzc3VtZWQgYnkgbW9zdCBmdW5jdGlvbnMgKG1vc3RseSBpbnRlcm5hbCBvbmVzKSB0aGF0IHByb2Nlc3NcbiAqIHRoZW0uXG4gKlxuICogMS4gTm8gYWRqYWNlbnQgc3RyaW5ncy5cbiAqIDIuIE5vIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogICAgVGhlIG9ubHkgZXhjZXB0aW9uIGhlcmUgaXMgdGhlIHRva2VuIHN0cmVhbSB0aGF0IG9ubHkgY29udGFpbnMgdGhlIGVtcHR5IHN0cmluZyBhbmQgbm90aGluZyBlbHNlLlxuICpcbiAqIEB0eXBlZGVmIHtBcnJheTxzdHJpbmcgfCBUb2tlbj59IFRva2VuU3RyZWFtXG4gKiBAZ2xvYmFsXG4gKiBAcHVibGljXG4gKi9cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdG9rZW4gb3IgdG9rZW4gc3RyZWFtIHRvIGFuIEhUTUwgcmVwcmVzZW50YXRpb24uXG4gKlxuICogVGhlIGZvbGxvd2luZyBob29rcyB3aWxsIGJlIHJ1bjpcbiAqIDEuIGB3cmFwYDogT24gZWFjaCB7QGxpbmsgVG9rZW59LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nIHwgVG9rZW4gfCBUb2tlblN0cmVhbX0gbyBUaGUgdG9rZW4gb3IgdG9rZW4gc3RyZWFtIHRvIGJlIGNvbnZlcnRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZSBUaGUgbmFtZSBvZiBjdXJyZW50IGxhbmd1YWdlLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIEhUTUwgcmVwcmVzZW50YXRpb24gb2YgdGhlIHRva2VuIG9yIHRva2VuIHN0cmVhbS5cbiAqIEBtZW1iZXJvZiBUb2tlblxuICogQHN0YXRpY1xuICovXG5Ub2tlbi5zdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkobywgbGFuZ3VhZ2UpIHtcblx0aWYgKHR5cGVvZiBvID09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0aWYgKEFycmF5LmlzQXJyYXkobykpIHtcblx0XHR2YXIgcyA9ICcnO1xuXHRcdG8uZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuXHRcdFx0cyArPSBzdHJpbmdpZnkoZSwgbGFuZ3VhZ2UpO1xuXHRcdH0pO1xuXHRcdHJldHVybiBzO1xuXHR9XG5cblx0dmFyIGVudiA9IHtcblx0XHR0eXBlOiBvLnR5cGUsXG5cdFx0Y29udGVudDogc3RyaW5naWZ5KG8uY29udGVudCwgbGFuZ3VhZ2UpLFxuXHRcdHRhZzogJ3NwYW4nLFxuXHRcdGNsYXNzZXM6IFsndG9rZW4nLCBvLnR5cGVdLFxuXHRcdGF0dHJpYnV0ZXM6IHt9LFxuXHRcdGxhbmd1YWdlOiBsYW5ndWFnZVxuXHR9O1xuXG5cdHZhciBhbGlhc2VzID0gby5hbGlhcztcblx0aWYgKGFsaWFzZXMpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShhbGlhc2VzKSkge1xuXHRcdFx0QXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoZW52LmNsYXNzZXMsIGFsaWFzZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbnYuY2xhc3Nlcy5wdXNoKGFsaWFzZXMpO1xuXHRcdH1cblx0fVxuXG5cdF8uaG9va3MucnVuKCd3cmFwJywgZW52KTtcblxuXHR2YXIgYXR0cmlidXRlcyA9ICcnO1xuXHRmb3IgKHZhciBuYW1lIGluIGVudi5hdHRyaWJ1dGVzKSB7XG5cdFx0YXR0cmlidXRlcyArPSAnICcgKyBuYW1lICsgJz1cIicgKyAoZW52LmF0dHJpYnV0ZXNbbmFtZV0gfHwgJycpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKSArICdcIic7XG5cdH1cblxuXHRyZXR1cm4gJzwnICsgZW52LnRhZyArICcgY2xhc3M9XCInICsgZW52LmNsYXNzZXMuam9pbignICcpICsgJ1wiJyArIGF0dHJpYnV0ZXMgKyAnPicgKyBlbnYuY29udGVudCArICc8LycgKyBlbnYudGFnICsgJz4nO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHBhcmFtIHtMaW5rZWRMaXN0PHN0cmluZyB8IFRva2VuPn0gdG9rZW5MaXN0XG4gKiBAcGFyYW0ge2FueX0gZ3JhbW1hclxuICogQHBhcmFtIHtMaW5rZWRMaXN0Tm9kZTxzdHJpbmcgfCBUb2tlbj59IHN0YXJ0Tm9kZVxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0UG9zXG4gKiBAcGFyYW0ge1JlbWF0Y2hPcHRpb25zfSBbcmVtYXRjaF1cbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQHByaXZhdGVcbiAqXG4gKiBAdHlwZWRlZiBSZW1hdGNoT3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IGNhdXNlXG4gKiBAcHJvcGVydHkge251bWJlcn0gcmVhY2hcbiAqL1xuZnVuY3Rpb24gbWF0Y2hHcmFtbWFyKHRleHQsIHRva2VuTGlzdCwgZ3JhbW1hciwgc3RhcnROb2RlLCBzdGFydFBvcywgcmVtYXRjaCkge1xuXHRmb3IgKHZhciB0b2tlbiBpbiBncmFtbWFyKSB7XG5cdFx0aWYgKCFncmFtbWFyLmhhc093blByb3BlcnR5KHRva2VuKSB8fCAhZ3JhbW1hclt0b2tlbl0pIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHZhciBwYXR0ZXJucyA9IGdyYW1tYXJbdG9rZW5dO1xuXHRcdHBhdHRlcm5zID0gQXJyYXkuaXNBcnJheShwYXR0ZXJucykgPyBwYXR0ZXJucyA6IFtwYXR0ZXJuc107XG5cblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IHBhdHRlcm5zLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRpZiAocmVtYXRjaCAmJiByZW1hdGNoLmNhdXNlID09IHRva2VuICsgJywnICsgaikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBwYXR0ZXJuT2JqID0gcGF0dGVybnNbal0sXG5cdFx0XHRcdGluc2lkZSA9IHBhdHRlcm5PYmouaW5zaWRlLFxuXHRcdFx0XHRsb29rYmVoaW5kID0gISFwYXR0ZXJuT2JqLmxvb2tiZWhpbmQsXG5cdFx0XHRcdGdyZWVkeSA9ICEhcGF0dGVybk9iai5ncmVlZHksXG5cdFx0XHRcdGxvb2tiZWhpbmRMZW5ndGggPSAwLFxuXHRcdFx0XHRhbGlhcyA9IHBhdHRlcm5PYmouYWxpYXM7XG5cblx0XHRcdGlmIChncmVlZHkgJiYgIXBhdHRlcm5PYmoucGF0dGVybi5nbG9iYWwpIHtcblx0XHRcdFx0Ly8gV2l0aG91dCB0aGUgZ2xvYmFsIGZsYWcsIGxhc3RJbmRleCB3b24ndCB3b3JrXG5cdFx0XHRcdHZhciBmbGFncyA9IHBhdHRlcm5PYmoucGF0dGVybi50b1N0cmluZygpLm1hdGNoKC9baW1zdXldKiQvKVswXTtcblx0XHRcdFx0cGF0dGVybk9iai5wYXR0ZXJuID0gUmVnRXhwKHBhdHRlcm5PYmoucGF0dGVybi5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqIEB0eXBlIHtSZWdFeHB9ICovXG5cdFx0XHR2YXIgcGF0dGVybiA9IHBhdHRlcm5PYmoucGF0dGVybiB8fCBwYXR0ZXJuT2JqO1xuXG5cdFx0XHRmb3IgKCAvLyBpdGVyYXRlIHRoZSB0b2tlbiBsaXN0IGFuZCBrZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IHRva2VuL3N0cmluZyBwb3NpdGlvblxuXHRcdFx0XHR2YXIgY3VycmVudE5vZGUgPSBzdGFydE5vZGUubmV4dCwgcG9zID0gc3RhcnRQb3M7XG5cdFx0XHRcdGN1cnJlbnROb2RlICE9PSB0b2tlbkxpc3QudGFpbDtcblx0XHRcdFx0cG9zICs9IGN1cnJlbnROb2RlLnZhbHVlLmxlbmd0aCwgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0XG5cdFx0XHQpIHtcblxuXHRcdFx0XHRpZiAocmVtYXRjaCAmJiBwb3MgPj0gcmVtYXRjaC5yZWFjaCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHN0ciA9IGN1cnJlbnROb2RlLnZhbHVlO1xuXG5cdFx0XHRcdGlmICh0b2tlbkxpc3QubGVuZ3RoID4gdGV4dC5sZW5ndGgpIHtcblx0XHRcdFx0XHQvLyBTb21ldGhpbmcgd2VudCB0ZXJyaWJseSB3cm9uZywgQUJPUlQsIEFCT1JUIVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChzdHIgaW5zdGFuY2VvZiBUb2tlbikge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHJlbW92ZUNvdW50ID0gMTsgLy8gdGhpcyBpcyB0aGUgdG8gcGFyYW1ldGVyIG9mIHJlbW92ZUJldHdlZW5cblxuXHRcdFx0XHRpZiAoZ3JlZWR5ICYmIGN1cnJlbnROb2RlICE9IHRva2VuTGlzdC50YWlsLnByZXYpIHtcblx0XHRcdFx0XHRwYXR0ZXJuLmxhc3RJbmRleCA9IHBvcztcblx0XHRcdFx0XHR2YXIgbWF0Y2ggPSBwYXR0ZXJuLmV4ZWModGV4dCk7XG5cdFx0XHRcdFx0aWYgKCFtYXRjaCkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIGZyb20gPSBtYXRjaC5pbmRleCArIChsb29rYmVoaW5kICYmIG1hdGNoWzFdID8gbWF0Y2hbMV0ubGVuZ3RoIDogMCk7XG5cdFx0XHRcdFx0dmFyIHRvID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG5cdFx0XHRcdFx0dmFyIHAgPSBwb3M7XG5cblx0XHRcdFx0XHQvLyBmaW5kIHRoZSBub2RlIHRoYXQgY29udGFpbnMgdGhlIG1hdGNoXG5cdFx0XHRcdFx0cCArPSBjdXJyZW50Tm9kZS52YWx1ZS5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKGZyb20gPj0gcCkge1xuXHRcdFx0XHRcdFx0Y3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0O1xuXHRcdFx0XHRcdFx0cCArPSBjdXJyZW50Tm9kZS52YWx1ZS5sZW5ndGg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGFkanVzdCBwb3MgKGFuZCBwKVxuXHRcdFx0XHRcdHAgLT0gY3VycmVudE5vZGUudmFsdWUubGVuZ3RoO1xuXHRcdFx0XHRcdHBvcyA9IHA7XG5cblx0XHRcdFx0XHQvLyB0aGUgY3VycmVudCBub2RlIGlzIGEgVG9rZW4sIHRoZW4gdGhlIG1hdGNoIHN0YXJ0cyBpbnNpZGUgYW5vdGhlciBUb2tlbiwgd2hpY2ggaXMgaW52YWxpZFxuXHRcdFx0XHRcdGlmIChjdXJyZW50Tm9kZS52YWx1ZSBpbnN0YW5jZW9mIFRva2VuKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBmaW5kIHRoZSBsYXN0IG5vZGUgd2hpY2ggaXMgYWZmZWN0ZWQgYnkgdGhpcyBtYXRjaFxuXHRcdFx0XHRcdGZvciAoXG5cdFx0XHRcdFx0XHR2YXIgayA9IGN1cnJlbnROb2RlO1xuXHRcdFx0XHRcdFx0ayAhPT0gdG9rZW5MaXN0LnRhaWwgJiYgKHAgPCB0byB8fCB0eXBlb2Ygay52YWx1ZSA9PT0gJ3N0cmluZycpO1xuXHRcdFx0XHRcdFx0ayA9IGsubmV4dFxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0cmVtb3ZlQ291bnQrKztcblx0XHRcdFx0XHRcdHAgKz0gay52YWx1ZS5sZW5ndGg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJlbW92ZUNvdW50LS07XG5cblx0XHRcdFx0XHQvLyByZXBsYWNlIHdpdGggdGhlIG5ldyBtYXRjaFxuXHRcdFx0XHRcdHN0ciA9IHRleHQuc2xpY2UocG9zLCBwKTtcblx0XHRcdFx0XHRtYXRjaC5pbmRleCAtPSBwb3M7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cGF0dGVybi5sYXN0SW5kZXggPSAwO1xuXG5cdFx0XHRcdFx0dmFyIG1hdGNoID0gcGF0dGVybi5leGVjKHN0cik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIW1hdGNoKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAobG9va2JlaGluZCkge1xuXHRcdFx0XHRcdGxvb2tiZWhpbmRMZW5ndGggPSBtYXRjaFsxXSA/IG1hdGNoWzFdLmxlbmd0aCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgZnJvbSA9IG1hdGNoLmluZGV4ICsgbG9va2JlaGluZExlbmd0aCxcblx0XHRcdFx0XHRtYXRjaFN0ciA9IG1hdGNoWzBdLnNsaWNlKGxvb2tiZWhpbmRMZW5ndGgpLFxuXHRcdFx0XHRcdHRvID0gZnJvbSArIG1hdGNoU3RyLmxlbmd0aCxcblx0XHRcdFx0XHRiZWZvcmUgPSBzdHIuc2xpY2UoMCwgZnJvbSksXG5cdFx0XHRcdFx0YWZ0ZXIgPSBzdHIuc2xpY2UodG8pO1xuXG5cdFx0XHRcdHZhciByZWFjaCA9IHBvcyArIHN0ci5sZW5ndGg7XG5cdFx0XHRcdGlmIChyZW1hdGNoICYmIHJlYWNoID4gcmVtYXRjaC5yZWFjaCkge1xuXHRcdFx0XHRcdHJlbWF0Y2gucmVhY2ggPSByZWFjaDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciByZW1vdmVGcm9tID0gY3VycmVudE5vZGUucHJldjtcblxuXHRcdFx0XHRpZiAoYmVmb3JlKSB7XG5cdFx0XHRcdFx0cmVtb3ZlRnJvbSA9IGFkZEFmdGVyKHRva2VuTGlzdCwgcmVtb3ZlRnJvbSwgYmVmb3JlKTtcblx0XHRcdFx0XHRwb3MgKz0gYmVmb3JlLmxlbmd0aDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlbW92ZVJhbmdlKHRva2VuTGlzdCwgcmVtb3ZlRnJvbSwgcmVtb3ZlQ291bnQpO1xuXG5cdFx0XHRcdHZhciB3cmFwcGVkID0gbmV3IFRva2VuKHRva2VuLCBpbnNpZGUgPyBfLnRva2VuaXplKG1hdGNoU3RyLCBpbnNpZGUpIDogbWF0Y2hTdHIsIGFsaWFzLCBtYXRjaFN0cik7XG5cdFx0XHRcdGN1cnJlbnROb2RlID0gYWRkQWZ0ZXIodG9rZW5MaXN0LCByZW1vdmVGcm9tLCB3cmFwcGVkKTtcblxuXHRcdFx0XHRpZiAoYWZ0ZXIpIHtcblx0XHRcdFx0XHRhZGRBZnRlcih0b2tlbkxpc3QsIGN1cnJlbnROb2RlLCBhZnRlcik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAocmVtb3ZlQ291bnQgPiAxKSB7XG5cdFx0XHRcdFx0Ly8gYXQgbGVhc3Qgb25lIFRva2VuIG9iamVjdCB3YXMgcmVtb3ZlZCwgc28gd2UgaGF2ZSB0byBkbyBzb21lIHJlbWF0Y2hpbmdcblx0XHRcdFx0XHQvLyB0aGlzIGNhbiBvbmx5IGhhcHBlbiBpZiB0aGUgY3VycmVudCBwYXR0ZXJuIGlzIGdyZWVkeVxuXHRcdFx0XHRcdG1hdGNoR3JhbW1hcih0ZXh0LCB0b2tlbkxpc3QsIGdyYW1tYXIsIGN1cnJlbnROb2RlLnByZXYsIHBvcywge1xuXHRcdFx0XHRcdFx0Y2F1c2U6IHRva2VuICsgJywnICsgaixcblx0XHRcdFx0XHRcdHJlYWNoOiByZWFjaFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQHR5cGVkZWYgTGlua2VkTGlzdE5vZGVcbiAqIEBwcm9wZXJ0eSB7VH0gdmFsdWVcbiAqIEBwcm9wZXJ0eSB7TGlua2VkTGlzdE5vZGU8VD4gfCBudWxsfSBwcmV2IFRoZSBwcmV2aW91cyBub2RlLlxuICogQHByb3BlcnR5IHtMaW5rZWRMaXN0Tm9kZTxUPiB8IG51bGx9IG5leHQgVGhlIG5leHQgbm9kZS5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcHJpdmF0ZVxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIExpbmtlZExpc3QoKSB7XG5cdC8qKiBAdHlwZSB7TGlua2VkTGlzdE5vZGU8VD59ICovXG5cdHZhciBoZWFkID0geyB2YWx1ZTogbnVsbCwgcHJldjogbnVsbCwgbmV4dDogbnVsbCB9O1xuXHQvKiogQHR5cGUge0xpbmtlZExpc3ROb2RlPFQ+fSAqL1xuXHR2YXIgdGFpbCA9IHsgdmFsdWU6IG51bGwsIHByZXY6IGhlYWQsIG5leHQ6IG51bGwgfTtcblx0aGVhZC5uZXh0ID0gdGFpbDtcblxuXHQvKiogQHR5cGUge0xpbmtlZExpc3ROb2RlPFQ+fSAqL1xuXHR0aGlzLmhlYWQgPSBoZWFkO1xuXHQvKiogQHR5cGUge0xpbmtlZExpc3ROb2RlPFQ+fSAqL1xuXHR0aGlzLnRhaWwgPSB0YWlsO1xuXHR0aGlzLmxlbmd0aCA9IDA7XG59XG5cbi8qKlxuICogQWRkcyBhIG5ldyBub2RlIHdpdGggdGhlIGdpdmVuIHZhbHVlIHRvIHRoZSBsaXN0LlxuICogQHBhcmFtIHtMaW5rZWRMaXN0PFQ+fSBsaXN0XG4gKiBAcGFyYW0ge0xpbmtlZExpc3ROb2RlPFQ+fSBub2RlXG4gKiBAcGFyYW0ge1R9IHZhbHVlXG4gKiBAcmV0dXJucyB7TGlua2VkTGlzdE5vZGU8VD59IFRoZSBhZGRlZCBub2RlLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZnVuY3Rpb24gYWRkQWZ0ZXIobGlzdCwgbm9kZSwgdmFsdWUpIHtcblx0Ly8gYXNzdW1lcyB0aGF0IG5vZGUgIT0gbGlzdC50YWlsICYmIHZhbHVlcy5sZW5ndGggPj0gMFxuXHR2YXIgbmV4dCA9IG5vZGUubmV4dDtcblxuXHR2YXIgbmV3Tm9kZSA9IHsgdmFsdWU6IHZhbHVlLCBwcmV2OiBub2RlLCBuZXh0OiBuZXh0IH07XG5cdG5vZGUubmV4dCA9IG5ld05vZGU7XG5cdG5leHQucHJldiA9IG5ld05vZGU7XG5cdGxpc3QubGVuZ3RoKys7XG5cblx0cmV0dXJuIG5ld05vZGU7XG59XG4vKipcbiAqIFJlbW92ZXMgYGNvdW50YCBub2RlcyBhZnRlciB0aGUgZ2l2ZW4gbm9kZS4gVGhlIGdpdmVuIG5vZGUgd2lsbCBub3QgYmUgcmVtb3ZlZC5cbiAqIEBwYXJhbSB7TGlua2VkTGlzdDxUPn0gbGlzdFxuICogQHBhcmFtIHtMaW5rZWRMaXN0Tm9kZTxUPn0gbm9kZVxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAdGVtcGxhdGUgVFxuICovXG5mdW5jdGlvbiByZW1vdmVSYW5nZShsaXN0LCBub2RlLCBjb3VudCkge1xuXHR2YXIgbmV4dCA9IG5vZGUubmV4dDtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudCAmJiBuZXh0ICE9PSBsaXN0LnRhaWw7IGkrKykge1xuXHRcdG5leHQgPSBuZXh0Lm5leHQ7XG5cdH1cblx0bm9kZS5uZXh0ID0gbmV4dDtcblx0bmV4dC5wcmV2ID0gbm9kZTtcblx0bGlzdC5sZW5ndGggLT0gaTtcbn1cbi8qKlxuICogQHBhcmFtIHtMaW5rZWRMaXN0PFQ+fSBsaXN0XG4gKiBAcmV0dXJucyB7VFtdfVxuICogQHRlbXBsYXRlIFRcbiAqL1xuZnVuY3Rpb24gdG9BcnJheShsaXN0KSB7XG5cdHZhciBhcnJheSA9IFtdO1xuXHR2YXIgbm9kZSA9IGxpc3QuaGVhZC5uZXh0O1xuXHR3aGlsZSAobm9kZSAhPT0gbGlzdC50YWlsKSB7XG5cdFx0YXJyYXkucHVzaChub2RlLnZhbHVlKTtcblx0XHRub2RlID0gbm9kZS5uZXh0O1xuXHR9XG5cdHJldHVybiBhcnJheTtcbn1cblxuXG5pZiAoIV9zZWxmLmRvY3VtZW50KSB7XG5cdGlmICghX3NlbGYuYWRkRXZlbnRMaXN0ZW5lcikge1xuXHRcdC8vIGluIE5vZGUuanNcblx0XHRyZXR1cm4gXztcblx0fVxuXG5cdGlmICghXy5kaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXIpIHtcblx0XHQvLyBJbiB3b3JrZXJcblx0XHRfc2VsZi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2dCkge1xuXHRcdFx0dmFyIG1lc3NhZ2UgPSBKU09OLnBhcnNlKGV2dC5kYXRhKSxcblx0XHRcdFx0bGFuZyA9IG1lc3NhZ2UubGFuZ3VhZ2UsXG5cdFx0XHRcdGNvZGUgPSBtZXNzYWdlLmNvZGUsXG5cdFx0XHRcdGltbWVkaWF0ZUNsb3NlID0gbWVzc2FnZS5pbW1lZGlhdGVDbG9zZTtcblxuXHRcdFx0X3NlbGYucG9zdE1lc3NhZ2UoXy5oaWdobGlnaHQoY29kZSwgXy5sYW5ndWFnZXNbbGFuZ10sIGxhbmcpKTtcblx0XHRcdGlmIChpbW1lZGlhdGVDbG9zZSkge1xuXHRcdFx0XHRfc2VsZi5jbG9zZSgpO1xuXHRcdFx0fVxuXHRcdH0sIGZhbHNlKTtcblx0fVxuXG5cdHJldHVybiBfO1xufVxuXG4vLyBHZXQgY3VycmVudCBzY3JpcHQgYW5kIGhpZ2hsaWdodFxudmFyIHNjcmlwdCA9IF8udXRpbC5jdXJyZW50U2NyaXB0KCk7XG5cbmlmIChzY3JpcHQpIHtcblx0Xy5maWxlbmFtZSA9IHNjcmlwdC5zcmM7XG5cblx0aWYgKHNjcmlwdC5oYXNBdHRyaWJ1dGUoJ2RhdGEtbWFudWFsJykpIHtcblx0XHRfLm1hbnVhbCA9IHRydWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gaGlnaGxpZ2h0QXV0b21hdGljYWxseUNhbGxiYWNrKCkge1xuXHRpZiAoIV8ubWFudWFsKSB7XG5cdFx0Xy5oaWdobGlnaHRBbGwoKTtcblx0fVxufVxuXG5pZiAoIV8ubWFudWFsKSB7XG5cdC8vIElmIHRoZSBkb2N1bWVudCBzdGF0ZSBpcyBcImxvYWRpbmdcIiwgdGhlbiB3ZSdsbCB1c2UgRE9NQ29udGVudExvYWRlZC5cblx0Ly8gSWYgdGhlIGRvY3VtZW50IHN0YXRlIGlzIFwiaW50ZXJhY3RpdmVcIiBhbmQgdGhlIHByaXNtLmpzIHNjcmlwdCBpcyBkZWZlcnJlZCwgdGhlbiB3ZSdsbCBhbHNvIHVzZSB0aGVcblx0Ly8gRE9NQ29udGVudExvYWRlZCBldmVudCBiZWNhdXNlIHRoZXJlIG1pZ2h0IGJlIHNvbWUgcGx1Z2lucyBvciBsYW5ndWFnZXMgd2hpY2ggaGF2ZSBhbHNvIGJlZW4gZGVmZXJyZWQgYW5kIHRoZXlcblx0Ly8gbWlnaHQgdGFrZSBsb25nZXIgb25lIGFuaW1hdGlvbiBmcmFtZSB0byBleGVjdXRlIHdoaWNoIGNhbiBjcmVhdGUgYSByYWNlIGNvbmRpdGlvbiB3aGVyZSBvbmx5IHNvbWUgcGx1Z2lucyBoYXZlXG5cdC8vIGJlZW4gbG9hZGVkIHdoZW4gUHJpc20uaGlnaGxpZ2h0QWxsKCkgaXMgZXhlY3V0ZWQsIGRlcGVuZGluZyBvbiBob3cgZmFzdCByZXNvdXJjZXMgYXJlIGxvYWRlZC5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9QcmlzbUpTL3ByaXNtL2lzc3Vlcy8yMTAyXG5cdHZhciByZWFkeVN0YXRlID0gZG9jdW1lbnQucmVhZHlTdGF0ZTtcblx0aWYgKHJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJyB8fCByZWFkeVN0YXRlID09PSAnaW50ZXJhY3RpdmUnICYmIHNjcmlwdCAmJiBzY3JpcHQuZGVmZXIpIHtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaGlnaGxpZ2h0QXV0b21hdGljYWxseUNhbGxiYWNrKTtcblx0fSBlbHNlIHtcblx0XHRpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShoaWdobGlnaHRBdXRvbWF0aWNhbGx5Q2FsbGJhY2spO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dChoaWdobGlnaHRBdXRvbWF0aWNhbGx5Q2FsbGJhY2ssIDE2KTtcblx0XHR9XG5cdH1cbn1cblxucmV0dXJuIF87XG5cbn0pKF9zZWxmKTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gUHJpc207XG59XG5cbi8vIGhhY2sgZm9yIGNvbXBvbmVudHMgdG8gd29yayBjb3JyZWN0bHkgaW4gbm9kZS5qc1xuaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG5cdGdsb2JhbC5QcmlzbSA9IFByaXNtO1xufVxuXG4vLyBzb21lIGFkZGl0aW9uYWwgZG9jdW1lbnRhdGlvbi90eXBlc1xuXG4vKipcbiAqIFRoZSBleHBhbnNpb24gb2YgYSBzaW1wbGUgYFJlZ0V4cGAgbGl0ZXJhbCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgcHJvcGVydGllcy5cbiAqXG4gKiBAdHlwZWRlZiBHcmFtbWFyVG9rZW5cbiAqIEBwcm9wZXJ0eSB7UmVnRXhwfSBwYXR0ZXJuIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gb2YgdGhlIHRva2VuLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbbG9va2JlaGluZD1mYWxzZV0gSWYgYHRydWVgLCB0aGVuIHRoZSBmaXJzdCBjYXB0dXJpbmcgZ3JvdXAgb2YgYHBhdHRlcm5gIHdpbGwgKGVmZmVjdGl2ZWx5KVxuICogYmVoYXZlIGFzIGEgbG9va2JlaGluZCBncm91cCBtZWFuaW5nIHRoYXQgdGhlIGNhcHR1cmVkIHRleHQgd2lsbCBub3QgYmUgcGFydCBvZiB0aGUgbWF0Y2hlZCB0ZXh0IG9mIHRoZSBuZXcgdG9rZW4uXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtncmVlZHk9ZmFsc2VdIFdoZXRoZXIgdGhlIHRva2VuIGlzIGdyZWVkeS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfHN0cmluZ1tdfSBbYWxpYXNdIEFuIG9wdGlvbmFsIGFsaWFzIG9yIGxpc3Qgb2YgYWxpYXNlcy5cbiAqIEBwcm9wZXJ0eSB7R3JhbW1hcn0gW2luc2lkZV0gVGhlIG5lc3RlZCBncmFtbWFyIG9mIHRoaXMgdG9rZW4uXG4gKlxuICogVGhlIGBpbnNpZGVgIGdyYW1tYXIgd2lsbCBiZSB1c2VkIHRvIHRva2VuaXplIHRoZSB0ZXh0IHZhbHVlIG9mIGVhY2ggdG9rZW4gb2YgdGhpcyBraW5kLlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbWFrZSBuZXN0ZWQgYW5kIGV2ZW4gcmVjdXJzaXZlIGxhbmd1YWdlIGRlZmluaXRpb25zLlxuICpcbiAqIE5vdGU6IFRoaXMgY2FuIGNhdXNlIGluZmluaXRlIHJlY3Vyc2lvbi4gQmUgY2FyZWZ1bCB3aGVuIHlvdSBlbWJlZCBkaWZmZXJlbnQgbGFuZ3VhZ2VzIG9yIGV2ZW4gdGhlIHNhbWUgbGFuZ3VhZ2UgaW50b1xuICogZWFjaCBhbm90aGVyLlxuICogQGdsb2JhbFxuICogQHB1YmxpY1xuKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBHcmFtbWFyXG4gKiBAdHlwZSB7T2JqZWN0PHN0cmluZywgUmVnRXhwIHwgR3JhbW1hclRva2VuIHwgQXJyYXk8UmVnRXhwIHwgR3JhbW1hclRva2VuPj59XG4gKiBAcHJvcGVydHkge0dyYW1tYXJ9IFtyZXN0XSBBbiBvcHRpb25hbCBncmFtbWFyIG9iamVjdCB0aGF0IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhpcyBncmFtbWFyLlxuICogQGdsb2JhbFxuICogQHB1YmxpY1xuICovXG5cbi8qKlxuICogQSBmdW5jdGlvbiB3aGljaCB3aWxsIGludm9rZWQgYWZ0ZXIgYW4gZWxlbWVudCB3YXMgc3VjY2Vzc2Z1bGx5IGhpZ2hsaWdodGVkLlxuICpcbiAqIEBjYWxsYmFjayBIaWdobGlnaHRDYWxsYmFja1xuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHN1Y2Nlc3NmdWxseSBoaWdobGlnaHRlZC5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQGdsb2JhbFxuICogQHB1YmxpY1xuKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgSG9va0NhbGxiYWNrXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IGVudiBUaGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIG9mIHRoZSBob29rLlxuICogQHJldHVybnMge3ZvaWR9XG4gKiBAZ2xvYmFsXG4gKiBAcHVibGljXG4gKi9cblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEJlZ2luIHByaXNtLW1hcmt1cC5qc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5QcmlzbS5sYW5ndWFnZXMubWFya3VwID0ge1xuXHQnY29tbWVudCc6IC88IS0tW1xcc1xcU10qPy0tPi8sXG5cdCdwcm9sb2cnOiAvPFxcP1tcXHNcXFNdKz9cXD8+Lyxcblx0J2RvY3R5cGUnOiB7XG5cdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbC8jTlQtZG9jdHlwZWRlY2xcblx0XHRwYXR0ZXJuOiAvPCFET0NUWVBFKD86W14+XCInW1xcXV18XCJbXlwiXSpcInwnW14nXSonKSsoPzpcXFsoPzpbXjxcIidcXF1dfFwiW15cIl0qXCJ8J1teJ10qJ3w8KD8hIS0tKXw8IS0tKD86W14tXXwtKD8hLT4pKSotLT4pKlxcXVxccyopPz4vaSxcblx0XHRncmVlZHk6IHRydWUsXG5cdFx0aW5zaWRlOiB7XG5cdFx0XHQnaW50ZXJuYWwtc3Vic2V0Jzoge1xuXHRcdFx0XHRwYXR0ZXJuOiAvKFxcWylbXFxzXFxTXSsoPz1cXF0+JCkvLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0XHRncmVlZHk6IHRydWUsXG5cdFx0XHRcdGluc2lkZTogbnVsbCAvLyBzZWUgYmVsb3dcblx0XHRcdH0sXG5cdFx0XHQnc3RyaW5nJzoge1xuXHRcdFx0XHRwYXR0ZXJuOiAvXCJbXlwiXSpcInwnW14nXSonLyxcblx0XHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0J3B1bmN0dWF0aW9uJzogL148IXw+JHxbW1xcXV0vLFxuXHRcdFx0J2RvY3R5cGUtdGFnJzogL15ET0NUWVBFLyxcblx0XHRcdCduYW1lJzogL1teXFxzPD4nXCJdKy9cblx0XHR9XG5cdH0sXG5cdCdjZGF0YSc6IC88IVxcW0NEQVRBXFxbW1xcc1xcU10qP11dPi9pLFxuXHQndGFnJzoge1xuXHRcdHBhdHRlcm46IC88XFwvPyg/IVxcZClbXlxccz5cXC89JDwlXSsoPzpcXHMoPzpcXHMqW15cXHM+XFwvPV0rKD86XFxzKj1cXHMqKD86XCJbXlwiXSpcInwnW14nXSonfFteXFxzJ1wiPj1dKyg/PVtcXHM+XSkpfCg/PVtcXHMvPl0pKSkrKT9cXHMqXFwvPz4vLFxuXHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRpbnNpZGU6IHtcblx0XHRcdCd0YWcnOiB7XG5cdFx0XHRcdHBhdHRlcm46IC9ePFxcLz9bXlxccz5cXC9dKy8sXG5cdFx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRcdCdwdW5jdHVhdGlvbic6IC9ePFxcLz8vLFxuXHRcdFx0XHRcdCduYW1lc3BhY2UnOiAvXlteXFxzPlxcLzpdKzovXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHQnYXR0ci12YWx1ZSc6IHtcblx0XHRcdFx0cGF0dGVybjogLz1cXHMqKD86XCJbXlwiXSpcInwnW14nXSonfFteXFxzJ1wiPj1dKykvLFxuXHRcdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0XHQncHVuY3R1YXRpb24nOiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHBhdHRlcm46IC9ePS8sXG5cdFx0XHRcdFx0XHRcdGFsaWFzOiAnYXR0ci1lcXVhbHMnXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0L1wifCcvXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0J3B1bmN0dWF0aW9uJzogL1xcLz8+Lyxcblx0XHRcdCdhdHRyLW5hbWUnOiB7XG5cdFx0XHRcdHBhdHRlcm46IC9bXlxccz5cXC9dKy8sXG5cdFx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRcdCduYW1lc3BhY2UnOiAvXlteXFxzPlxcLzpdKzovXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH1cblx0fSxcblx0J2VudGl0eSc6IFtcblx0XHR7XG5cdFx0XHRwYXR0ZXJuOiAvJltcXGRhLXpdezEsOH07L2ksXG5cdFx0XHRhbGlhczogJ25hbWVkLWVudGl0eSdcblx0XHR9LFxuXHRcdC8mI3g/W1xcZGEtZl17MSw4fTsvaVxuXHRdXG59O1xuXG5QcmlzbS5sYW5ndWFnZXMubWFya3VwWyd0YWcnXS5pbnNpZGVbJ2F0dHItdmFsdWUnXS5pbnNpZGVbJ2VudGl0eSddID1cblx0UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cFsnZW50aXR5J107XG5QcmlzbS5sYW5ndWFnZXMubWFya3VwWydkb2N0eXBlJ10uaW5zaWRlWydpbnRlcm5hbC1zdWJzZXQnXS5pbnNpZGUgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuXG4vLyBQbHVnaW4gdG8gbWFrZSBlbnRpdHkgdGl0bGUgc2hvdyB0aGUgcmVhbCBlbnRpdHksIGlkZWEgYnkgUm9tYW4gS29tYXJvdlxuUHJpc20uaG9va3MuYWRkKCd3cmFwJywgZnVuY3Rpb24gKGVudikge1xuXG5cdGlmIChlbnYudHlwZSA9PT0gJ2VudGl0eScpIHtcblx0XHRlbnYuYXR0cmlidXRlc1sndGl0bGUnXSA9IGVudi5jb250ZW50LnJlcGxhY2UoLyZhbXA7LywgJyYnKTtcblx0fVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZywgJ2FkZElubGluZWQnLCB7XG5cdC8qKlxuXHQgKiBBZGRzIGFuIGlubGluZWQgbGFuZ3VhZ2UgdG8gbWFya3VwLlxuXHQgKlxuXHQgKiBBbiBleGFtcGxlIG9mIGFuIGlubGluZWQgbGFuZ3VhZ2UgaXMgQ1NTIHdpdGggYDxzdHlsZT5gIHRhZ3MuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lIFRoZSBuYW1lIG9mIHRoZSB0YWcgdGhhdCBjb250YWlucyB0aGUgaW5saW5lZCBsYW5ndWFnZS4gVGhpcyBuYW1lIHdpbGwgYmUgdHJlYXRlZCBhc1xuXHQgKiBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbGFuZyBUaGUgbGFuZ3VhZ2Uga2V5LlxuXHQgKiBAZXhhbXBsZVxuXHQgKiBhZGRJbmxpbmVkKCdzdHlsZScsICdjc3MnKTtcblx0ICovXG5cdHZhbHVlOiBmdW5jdGlvbiBhZGRJbmxpbmVkKHRhZ05hbWUsIGxhbmcpIHtcblx0XHR2YXIgaW5jbHVkZWRDZGF0YUluc2lkZSA9IHt9O1xuXHRcdGluY2x1ZGVkQ2RhdGFJbnNpZGVbJ2xhbmd1YWdlLScgKyBsYW5nXSA9IHtcblx0XHRcdHBhdHRlcm46IC8oXjwhXFxbQ0RBVEFcXFspW1xcc1xcU10rPyg/PVxcXVxcXT4kKS9pLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzW2xhbmddXG5cdFx0fTtcblx0XHRpbmNsdWRlZENkYXRhSW5zaWRlWydjZGF0YSddID0gL148IVxcW0NEQVRBXFxbfFxcXVxcXT4kL2k7XG5cblx0XHR2YXIgaW5zaWRlID0ge1xuXHRcdFx0J2luY2x1ZGVkLWNkYXRhJzoge1xuXHRcdFx0XHRwYXR0ZXJuOiAvPCFcXFtDREFUQVxcW1tcXHNcXFNdKj9cXF1cXF0+L2ksXG5cdFx0XHRcdGluc2lkZTogaW5jbHVkZWRDZGF0YUluc2lkZVxuXHRcdFx0fVxuXHRcdH07XG5cdFx0aW5zaWRlWydsYW5ndWFnZS0nICsgbGFuZ10gPSB7XG5cdFx0XHRwYXR0ZXJuOiAvW1xcc1xcU10rLyxcblx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzW2xhbmddXG5cdFx0fTtcblxuXHRcdHZhciBkZWYgPSB7fTtcblx0XHRkZWZbdGFnTmFtZV0gPSB7XG5cdFx0XHRwYXR0ZXJuOiBSZWdFeHAoLyg8X19bXFxzXFxTXSo/PikoPzo8IVxcW0NEQVRBXFxbKD86W15cXF1dfFxcXSg/IVxcXT4pKSpcXF1cXF0+fCg/ITwhXFxbQ0RBVEFcXFspW1xcc1xcU10pKj8oPz08XFwvX18+KS8uc291cmNlLnJlcGxhY2UoL19fL2csIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRhZ05hbWU7IH0pLCAnaScpLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZTogaW5zaWRlXG5cdFx0fTtcblxuXHRcdFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ21hcmt1cCcsICdjZGF0YScsIGRlZik7XG5cdH1cbn0pO1xuXG5QcmlzbS5sYW5ndWFnZXMuaHRtbCA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXA7XG5QcmlzbS5sYW5ndWFnZXMubWF0aG1sID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cDtcblByaXNtLmxhbmd1YWdlcy5zdmcgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuXG5QcmlzbS5sYW5ndWFnZXMueG1sID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnbWFya3VwJywge30pO1xuUHJpc20ubGFuZ3VhZ2VzLnNzbWwgPSBQcmlzbS5sYW5ndWFnZXMueG1sO1xuUHJpc20ubGFuZ3VhZ2VzLmF0b20gPSBQcmlzbS5sYW5ndWFnZXMueG1sO1xuUHJpc20ubGFuZ3VhZ2VzLnJzcyA9IFByaXNtLmxhbmd1YWdlcy54bWw7XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBCZWdpbiBwcmlzbS1jc3MuanNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuKGZ1bmN0aW9uIChQcmlzbSkge1xuXG5cdHZhciBzdHJpbmcgPSAvKFwifCcpKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS87XG5cblx0UHJpc20ubGFuZ3VhZ2VzLmNzcyA9IHtcblx0XHQnY29tbWVudCc6IC9cXC9cXCpbXFxzXFxTXSo/XFwqXFwvLyxcblx0XHQnYXRydWxlJzoge1xuXHRcdFx0cGF0dGVybjogL0BbXFx3LV0rW1xcc1xcU10qPyg/Ojt8KD89XFxzKlxceykpLyxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQncnVsZSc6IC9eQFtcXHctXSsvLFxuXHRcdFx0XHQnc2VsZWN0b3ItZnVuY3Rpb24tYXJndW1lbnQnOiB7XG5cdFx0XHRcdFx0cGF0dGVybjogLyhcXGJzZWxlY3RvclxccypcXCgoPyFcXHMqXFwpKVxccyopKD86W14oKV18XFwoKD86W14oKV18XFwoW14oKV0qXFwpKSpcXCkpKz8oPz1cXHMqXFwpKS8sXG5cdFx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdFx0XHRhbGlhczogJ3NlbGVjdG9yJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQna2V5d29yZCc6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiAvKF58W15cXHctXSkoPzphbmR8bm90fG9ubHl8b3IpKD8hW1xcdy1dKS8sXG5cdFx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIFNlZSByZXN0IGJlbG93XG5cdFx0XHR9XG5cdFx0fSxcblx0XHQndXJsJzoge1xuXHRcdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXHRcdFx0cGF0dGVybjogUmVnRXhwKCdcXFxcYnVybFxcXFwoKD86JyArIHN0cmluZy5zb3VyY2UgKyAnfCcgKyAvKD86W15cXFxcXFxyXFxuKClcIiddfFxcXFxbXFxzXFxTXSkqLy5zb3VyY2UgKyAnKVxcXFwpJywgJ2knKSxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQnZnVuY3Rpb24nOiAvXnVybC9pLFxuXHRcdFx0XHQncHVuY3R1YXRpb24nOiAvXlxcKHxcXCkkLyxcblx0XHRcdFx0J3N0cmluZyc6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiBSZWdFeHAoJ14nICsgc3RyaW5nLnNvdXJjZSArICckJyksXG5cdFx0XHRcdFx0YWxpYXM6ICd1cmwnXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdCdzZWxlY3Rvcic6IFJlZ0V4cCgnW157fVxcXFxzXSg/Oltee307XCJcXCddfCcgKyBzdHJpbmcuc291cmNlICsgJykqPyg/PVxcXFxzKlxcXFx7KScpLFxuXHRcdCdzdHJpbmcnOiB7XG5cdFx0XHRwYXR0ZXJuOiBzdHJpbmcsXG5cdFx0XHRncmVlZHk6IHRydWVcblx0XHR9LFxuXHRcdCdwcm9wZXJ0eSc6IC9bLV9hLXpcXHhBMC1cXHVGRkZGXVstXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKjopL2ksXG5cdFx0J2ltcG9ydGFudCc6IC8haW1wb3J0YW50XFxiL2ksXG5cdFx0J2Z1bmN0aW9uJzogL1stYS16MC05XSsoPz1cXCgpL2ksXG5cdFx0J3B1bmN0dWF0aW9uJzogL1soKXt9OzosXS9cblx0fTtcblxuXHRQcmlzbS5sYW5ndWFnZXMuY3NzWydhdHJ1bGUnXS5pbnNpZGUucmVzdCA9IFByaXNtLmxhbmd1YWdlcy5jc3M7XG5cblx0dmFyIG1hcmt1cCA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXA7XG5cdGlmIChtYXJrdXApIHtcblx0XHRtYXJrdXAudGFnLmFkZElubGluZWQoJ3N0eWxlJywgJ2NzcycpO1xuXG5cdFx0UHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnaW5zaWRlJywgJ2F0dHItdmFsdWUnLCB7XG5cdFx0XHQnc3R5bGUtYXR0cic6IHtcblx0XHRcdFx0cGF0dGVybjogL1xccypzdHlsZT0oXCJ8JykoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pKlxcMS9pLFxuXHRcdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0XHQnYXR0ci1uYW1lJzoge1xuXHRcdFx0XHRcdFx0cGF0dGVybjogL15cXHMqc3R5bGUvaSxcblx0XHRcdFx0XHRcdGluc2lkZTogbWFya3VwLnRhZy5pbnNpZGVcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCdwdW5jdHVhdGlvbic6IC9eXFxzKj1cXHMqWydcIl18WydcIl1cXHMqJC8sXG5cdFx0XHRcdFx0J2F0dHItdmFsdWUnOiB7XG5cdFx0XHRcdFx0XHRwYXR0ZXJuOiAvLisvaSxcblx0XHRcdFx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmNzc1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0YWxpYXM6ICdsYW5ndWFnZS1jc3MnXG5cdFx0XHR9XG5cdFx0fSwgbWFya3VwLnRhZyk7XG5cdH1cblxufShQcmlzbSkpO1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tY2xpa2UuanNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuUHJpc20ubGFuZ3VhZ2VzLmNsaWtlID0ge1xuXHQnY29tbWVudCc6IFtcblx0XHR7XG5cdFx0XHRwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0XHR9LFxuXHRcdHtcblx0XHRcdHBhdHRlcm46IC8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0fVxuXHRdLFxuXHQnc3RyaW5nJzoge1xuXHRcdHBhdHRlcm46IC8oW1wiJ10pKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sXG5cdFx0Z3JlZWR5OiB0cnVlXG5cdH0sXG5cdCdjbGFzcy1uYW1lJzoge1xuXHRcdHBhdHRlcm46IC8oXFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3x0cmFpdHxpbnN0YW5jZW9mfG5ldylcXHMrfFxcYmNhdGNoXFxzK1xcKClbXFx3LlxcXFxdKy9pLFxuXHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0aW5zaWRlOiB7XG5cdFx0XHQncHVuY3R1YXRpb24nOiAvWy5cXFxcXS9cblx0XHR9XG5cdH0sXG5cdCdrZXl3b3JkJzogL1xcYig/OmlmfGVsc2V8d2hpbGV8ZG98Zm9yfHJldHVybnxpbnxpbnN0YW5jZW9mfGZ1bmN0aW9ufG5ld3x0cnl8dGhyb3d8Y2F0Y2h8ZmluYWxseXxudWxsfGJyZWFrfGNvbnRpbnVlKVxcYi8sXG5cdCdib29sZWFuJzogL1xcYig/OnRydWV8ZmFsc2UpXFxiLyxcblx0J2Z1bmN0aW9uJzogL1xcdysoPz1cXCgpLyxcblx0J251bWJlcic6IC9cXGIweFtcXGRhLWZdK1xcYnwoPzpcXGJcXGQrXFwuP1xcZCp8XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8vaSxcblx0J29wZXJhdG9yJzogL1s8Pl09P3xbIT1dPT89P3wtLT98XFwrXFwrP3wmJj98XFx8XFx8P3xbPyovfl4lXS8sXG5cdCdwdW5jdHVhdGlvbic6IC9be31bXFxdOygpLC46XS9cbn07XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBCZWdpbiBwcmlzbS1qYXZhc2NyaXB0LmpzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG5cdCdjbGFzcy1uYW1lJzogW1xuXHRcdFByaXNtLmxhbmd1YWdlcy5jbGlrZVsnY2xhc3MtbmFtZSddLFxuXHRcdHtcblx0XHRcdHBhdHRlcm46IC8oXnxbXiRcXHdcXHhBMC1cXHVGRkZGXSlbXyRBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFwuKD86cHJvdG90eXBlfGNvbnN0cnVjdG9yKSkvLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdH1cblx0XSxcblx0J2tleXdvcmQnOiBbXG5cdFx0e1xuXHRcdFx0cGF0dGVybjogLygoPzpefH0pXFxzKikoPzpjYXRjaHxmaW5hbGx5KVxcYi8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRwYXR0ZXJuOiAvKF58W14uXXxcXC5cXC5cXC5cXHMqKVxcYig/OmFzfGFzeW5jKD89XFxzKig/OmZ1bmN0aW9uXFxifFxcKHxbJFxcd1xceEEwLVxcdUZGRkZdfCQpKXxhd2FpdHxicmVha3xjYXNlfGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlYnVnZ2VyfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmb3J8ZnJvbXxmdW5jdGlvbnwoPzpnZXR8c2V0KSg/PVxccypbXFxbJFxcd1xceEEwLVxcdUZGRkZdKXxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnN0YW5jZW9mfGludGVyZmFjZXxsZXR8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZW9mfHVuZGVmaW5lZHx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKVxcYi8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0fSxcblx0XSxcblx0J251bWJlcic6IC9cXGIoPzooPzowW3hYXSg/OltcXGRBLUZhLWZdKD86X1tcXGRBLUZhLWZdKT8pK3wwW2JCXSg/OlswMV0oPzpfWzAxXSk/KSt8MFtvT10oPzpbMC03XSg/Ol9bMC03XSk/KSspbj98KD86XFxkKD86X1xcZCk/KStufE5hTnxJbmZpbml0eSlcXGJ8KD86XFxiKD86XFxkKD86X1xcZCk/KStcXC4/KD86XFxkKD86X1xcZCk/KSp8XFxCXFwuKD86XFxkKD86X1xcZCk/KSspKD86W0VlXVsrLV0/KD86XFxkKD86X1xcZCk/KSspPy8sXG5cdC8vIEFsbG93IGZvciBhbGwgbm9uLUFTQ0lJIGNoYXJhY3RlcnMgKFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMDA4NDQ0KVxuXHQnZnVuY3Rpb24nOiAvIz9bXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKig/OlxcLlxccyooPzphcHBseXxiaW5kfGNhbGwpXFxzKik/XFwoKS8sXG5cdCdvcGVyYXRvcic6IC8tLXxcXCtcXCt8XFwqXFwqPT98PT58JiY9P3xcXHxcXHw9P3xbIT1dPT18PDw9P3w+Pj4/PT98Wy0rKi8lJnxeIT08Pl09P3xcXC57M318XFw/XFw/PT98XFw/XFwuP3xbfjpdL1xufSk7XG5cblByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0WydjbGFzcy1uYW1lJ11bMF0ucGF0dGVybiA9IC8oXFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3xpbnN0YW5jZW9mfG5ldylcXHMrKVtcXHcuXFxcXF0rLztcblxuUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnamF2YXNjcmlwdCcsICdrZXl3b3JkJywge1xuXHQncmVnZXgnOiB7XG5cdFx0cGF0dGVybjogLygoPzpefFteJFxcd1xceEEwLVxcdUZGRkYuXCInXFxdKVxcc118XFxiKD86cmV0dXJufHlpZWxkKSlcXHMqKVxcLyg/OlxcWyg/OlteXFxdXFxcXFxcclxcbl18XFxcXC4pKl18XFxcXC58W14vXFxcXFxcW1xcclxcbl0pK1xcL1tnaW15dXNdezAsNn0oPz0oPzpcXHN8XFwvXFwqKD86W14qXXxcXCooPyFcXC8pKSpcXCpcXC8pKig/OiR8W1xcclxcbiwuOzp9KVxcXV18XFwvXFwvKSkvLFxuXHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0Z3JlZWR5OiB0cnVlXG5cdH0sXG5cdC8vIFRoaXMgbXVzdCBiZSBkZWNsYXJlZCBiZWZvcmUga2V5d29yZCBiZWNhdXNlIHdlIHVzZSBcImZ1bmN0aW9uXCIgaW5zaWRlIHRoZSBsb29rLWZvcndhcmRcblx0J2Z1bmN0aW9uLXZhcmlhYmxlJzoge1xuXHRcdHBhdHRlcm46IC8jP1tfJGEtekEtWlxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSooPz1cXHMqWz06XVxccyooPzphc3luY1xccyopPyg/OlxcYmZ1bmN0aW9uXFxifCg/OlxcKCg/OlteKCldfFxcKFteKCldKlxcKSkqXFwpfFtfJGEtekEtWlxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSopXFxzKj0+KSkvLFxuXHRcdGFsaWFzOiAnZnVuY3Rpb24nXG5cdH0sXG5cdCdwYXJhbWV0ZXInOiBbXG5cdFx0e1xuXHRcdFx0cGF0dGVybjogLyhmdW5jdGlvbig/OlxccytbXyRBLVphLXpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKT9cXHMqXFwoXFxzKikoPyFcXHMpKD86W14oKV18XFwoW14oKV0qXFwpKSs/KD89XFxzKlxcKSkvLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcblx0XHR9LFxuXHRcdHtcblx0XHRcdHBhdHRlcm46IC9bXyRhLXpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKj0+KS9pLFxuXHRcdFx0aW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0cGF0dGVybjogLyhcXChcXHMqKSg/IVxccykoPzpbXigpXXxcXChbXigpXSpcXCkpKz8oPz1cXHMqXFwpXFxzKj0+KS8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0aW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0cGF0dGVybjogLygoPzpcXGJ8XFxzfF4pKD8hKD86YXN8YXN5bmN8YXdhaXR8YnJlYWt8Y2FzZXxjYXRjaHxjbGFzc3xjb25zdHxjb250aW51ZXxkZWJ1Z2dlcnxkZWZhdWx0fGRlbGV0ZXxkb3xlbHNlfGVudW18ZXhwb3J0fGV4dGVuZHN8ZmluYWxseXxmb3J8ZnJvbXxmdW5jdGlvbnxnZXR8aWZ8aW1wbGVtZW50c3xpbXBvcnR8aW58aW5zdGFuY2VvZnxpbnRlcmZhY2V8bGV0fG5ld3xudWxsfG9mfHBhY2thZ2V8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJldHVybnxzZXR8c3RhdGljfHN1cGVyfHN3aXRjaHx0aGlzfHRocm93fHRyeXx0eXBlb2Z8dW5kZWZpbmVkfHZhcnx2b2lkfHdoaWxlfHdpdGh8eWllbGQpKD8hWyRcXHdcXHhBMC1cXHVGRkZGXSkpKD86W18kQS1aYS16XFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKlxccyopXFwoXFxzKnxcXF1cXHMqXFwoXFxzKikoPyFcXHMpKD86W14oKV18XFwoW14oKV0qXFwpKSs/KD89XFxzKlxcKVxccypcXHspLyxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0XG5cdFx0fVxuXHRdLFxuXHQnY29uc3RhbnQnOiAvXFxiW0EtWl0oPzpbQS1aX118XFxkeD8pKlxcYi9cbn0pO1xuXG5QcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdqYXZhc2NyaXB0JywgJ3N0cmluZycsIHtcblx0J3RlbXBsYXRlLXN0cmluZyc6IHtcblx0XHRwYXR0ZXJuOiAvYCg/OlxcXFxbXFxzXFxTXXxcXCR7KD86W157fV18eyg/Oltee31dfHtbXn1dKn0pKn0pK318KD8hXFwkeylbXlxcXFxgXSkqYC8sXG5cdFx0Z3JlZWR5OiB0cnVlLFxuXHRcdGluc2lkZToge1xuXHRcdFx0J3RlbXBsYXRlLXB1bmN0dWF0aW9uJzoge1xuXHRcdFx0XHRwYXR0ZXJuOiAvXmB8YCQvLFxuXHRcdFx0XHRhbGlhczogJ3N0cmluZydcblx0XHRcdH0sXG5cdFx0XHQnaW50ZXJwb2xhdGlvbic6IHtcblx0XHRcdFx0cGF0dGVybjogLygoPzpefFteXFxcXF0pKD86XFxcXHsyfSkqKVxcJHsoPzpbXnt9XXx7KD86W157fV18e1tefV0qfSkqfSkrfS8sXG5cdFx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRcdCdpbnRlcnBvbGF0aW9uLXB1bmN0dWF0aW9uJzoge1xuXHRcdFx0XHRcdFx0cGF0dGVybjogL15cXCR7fH0kLyxcblx0XHRcdFx0XHRcdGFsaWFzOiAncHVuY3R1YXRpb24nXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRyZXN0OiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0J3N0cmluZyc6IC9bXFxzXFxTXSsvXG5cdFx0fVxuXHR9XG59KTtcblxuaWYgKFByaXNtLmxhbmd1YWdlcy5tYXJrdXApIHtcblx0UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuYWRkSW5saW5lZCgnc2NyaXB0JywgJ2phdmFzY3JpcHQnKTtcbn1cblxuUHJpc20ubGFuZ3VhZ2VzLmpzID0gUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQ7XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBCZWdpbiBwcmlzbS1maWxlLWhpZ2hsaWdodC5qc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHRpZiAodHlwZW9mIHNlbGYgPT09ICd1bmRlZmluZWQnIHx8ICFzZWxmLlByaXNtIHx8ICFzZWxmLmRvY3VtZW50KSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIFByaXNtID0gd2luZG93LlByaXNtO1xuXG5cdHZhciBMT0FESU5HX01FU1NBR0UgPSAnTG9hZGluZ+KApic7XG5cdHZhciBGQUlMVVJFX01FU1NBR0UgPSBmdW5jdGlvbiAoc3RhdHVzLCBtZXNzYWdlKSB7XG5cdFx0cmV0dXJuICfinJYgRXJyb3IgJyArIHN0YXR1cyArICcgd2hpbGUgZmV0Y2hpbmcgZmlsZTogJyArIG1lc3NhZ2U7XG5cdH07XG5cdHZhciBGQUlMVVJFX0VNUFRZX01FU1NBR0UgPSAn4pyWIEVycm9yOiBGaWxlIGRvZXMgbm90IGV4aXN0IG9yIGlzIGVtcHR5JztcblxuXHR2YXIgRVhURU5TSU9OUyA9IHtcblx0XHQnanMnOiAnamF2YXNjcmlwdCcsXG5cdFx0J3B5JzogJ3B5dGhvbicsXG5cdFx0J3JiJzogJ3J1YnknLFxuXHRcdCdwczEnOiAncG93ZXJzaGVsbCcsXG5cdFx0J3BzbTEnOiAncG93ZXJzaGVsbCcsXG5cdFx0J3NoJzogJ2Jhc2gnLFxuXHRcdCdiYXQnOiAnYmF0Y2gnLFxuXHRcdCdoJzogJ2MnLFxuXHRcdCd0ZXgnOiAnbGF0ZXgnXG5cdH07XG5cblx0dmFyIFNUQVRVU19BVFRSID0gJ2RhdGEtc3JjLXN0YXR1cyc7XG5cdHZhciBTVEFUVVNfTE9BRElORyA9ICdsb2FkaW5nJztcblx0dmFyIFNUQVRVU19MT0FERUQgPSAnbG9hZGVkJztcblx0dmFyIFNUQVRVU19GQUlMRUQgPSAnZmFpbGVkJztcblxuXHR2YXIgU0VMRUNUT1IgPSAncHJlW2RhdGEtc3JjXTpub3QoWycgKyBTVEFUVVNfQVRUUiArICc9XCInICsgU1RBVFVTX0xPQURFRCArICdcIl0pJ1xuXHRcdCsgJzpub3QoWycgKyBTVEFUVVNfQVRUUiArICc9XCInICsgU1RBVFVTX0xPQURJTkcgKyAnXCJdKSc7XG5cblx0dmFyIGxhbmcgPSAvXFxibGFuZyg/OnVhZ2UpPy0oW1xcdy1dKylcXGIvaTtcblxuXHQvKipcblx0ICogU2V0cyB0aGUgUHJpc20gYGxhbmd1YWdlLXh4eHhgIG9yIGBsYW5nLXh4eHhgIGNsYXNzIHRvIHRoZSBnaXZlbiBsYW5ndWFnZS5cblx0ICpcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbGFuZ3VhZ2Vcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRmdW5jdGlvbiBzZXRMYW5ndWFnZUNsYXNzKGVsZW1lbnQsIGxhbmd1YWdlKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lO1xuXHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKGxhbmcsICcgJykgKyAnIGxhbmd1YWdlLScgKyBsYW5ndWFnZTtcblx0XHRlbGVtZW50LmNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKC9cXHMrL2csICcgJykudHJpbSgpO1xuXHR9XG5cblxuXHRQcmlzbS5ob29rcy5hZGQoJ2JlZm9yZS1oaWdobGlnaHRhbGwnLCBmdW5jdGlvbiAoZW52KSB7XG5cdFx0ZW52LnNlbGVjdG9yICs9ICcsICcgKyBTRUxFQ1RPUjtcblx0fSk7XG5cblx0UHJpc20uaG9va3MuYWRkKCdiZWZvcmUtc2FuaXR5LWNoZWNrJywgZnVuY3Rpb24gKGVudikge1xuXHRcdHZhciBwcmUgPSAvKiogQHR5cGUge0hUTUxQcmVFbGVtZW50fSAqLyAoZW52LmVsZW1lbnQpO1xuXHRcdGlmIChwcmUubWF0Y2hlcyhTRUxFQ1RPUikpIHtcblx0XHRcdGVudi5jb2RlID0gJyc7IC8vIGZhc3QtcGF0aCB0aGUgd2hvbGUgdGhpbmcgYW5kIGdvIHRvIGNvbXBsZXRlXG5cblx0XHRcdHByZS5zZXRBdHRyaWJ1dGUoU1RBVFVTX0FUVFIsIFNUQVRVU19MT0FESU5HKTsgLy8gbWFyayBhcyBsb2FkaW5nXG5cblx0XHRcdC8vIGFkZCBjb2RlIGVsZW1lbnQgd2l0aCBsb2FkaW5nIG1lc3NhZ2Vcblx0XHRcdHZhciBjb2RlID0gcHJlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0NPREUnKSk7XG5cdFx0XHRjb2RlLnRleHRDb250ZW50ID0gTE9BRElOR19NRVNTQUdFO1xuXG5cdFx0XHR2YXIgc3JjID0gcHJlLmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKTtcblxuXHRcdFx0dmFyIGxhbmd1YWdlID0gZW52Lmxhbmd1YWdlO1xuXHRcdFx0aWYgKGxhbmd1YWdlID09PSAnbm9uZScpIHtcblx0XHRcdFx0Ly8gdGhlIGxhbmd1YWdlIG1pZ2h0IGJlICdub25lJyBiZWNhdXNlIHRoZXJlIGlzIG5vIGxhbmd1YWdlIHNldDtcblx0XHRcdFx0Ly8gaW4gdGhpcyBjYXNlLCB3ZSB3YW50IHRvIHVzZSB0aGUgZXh0ZW5zaW9uIGFzIHRoZSBsYW5ndWFnZVxuXHRcdFx0XHR2YXIgZXh0ZW5zaW9uID0gKC9cXC4oXFx3KykkLy5leGVjKHNyYykgfHwgWywgJ25vbmUnXSlbMV07XG5cdFx0XHRcdGxhbmd1YWdlID0gRVhURU5TSU9OU1tleHRlbnNpb25dIHx8IGV4dGVuc2lvbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gc2V0IGxhbmd1YWdlIGNsYXNzZXNcblx0XHRcdHNldExhbmd1YWdlQ2xhc3MoY29kZSwgbGFuZ3VhZ2UpO1xuXHRcdFx0c2V0TGFuZ3VhZ2VDbGFzcyhwcmUsIGxhbmd1YWdlKTtcblxuXHRcdFx0Ly8gcHJlbG9hZCB0aGUgbGFuZ3VhZ2Vcblx0XHRcdHZhciBhdXRvbG9hZGVyID0gUHJpc20ucGx1Z2lucy5hdXRvbG9hZGVyO1xuXHRcdFx0aWYgKGF1dG9sb2FkZXIpIHtcblx0XHRcdFx0YXV0b2xvYWRlci5sb2FkTGFuZ3VhZ2VzKGxhbmd1YWdlKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gbG9hZCBmaWxlXG5cdFx0XHR2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdFx0XHR4aHIub3BlbignR0VUJywgc3JjLCB0cnVlKTtcblx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSA9PSA0KSB7XG5cdFx0XHRcdFx0aWYgKHhoci5zdGF0dXMgPCA0MDAgJiYgeGhyLnJlc3BvbnNlVGV4dCkge1xuXHRcdFx0XHRcdFx0Ly8gbWFyayBhcyBsb2FkZWRcblx0XHRcdFx0XHRcdHByZS5zZXRBdHRyaWJ1dGUoU1RBVFVTX0FUVFIsIFNUQVRVU19MT0FERUQpO1xuXG5cdFx0XHRcdFx0XHQvLyBoaWdobGlnaHQgY29kZVxuXHRcdFx0XHRcdFx0Y29kZS50ZXh0Q29udGVudCA9IHhoci5yZXNwb25zZVRleHQ7XG5cdFx0XHRcdFx0XHRQcmlzbS5oaWdobGlnaHRFbGVtZW50KGNvZGUpO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIG1hcmsgYXMgZmFpbGVkXG5cdFx0XHRcdFx0XHRwcmUuc2V0QXR0cmlidXRlKFNUQVRVU19BVFRSLCBTVEFUVVNfRkFJTEVEKTtcblxuXHRcdFx0XHRcdFx0aWYgKHhoci5zdGF0dXMgPj0gNDAwKSB7XG5cdFx0XHRcdFx0XHRcdGNvZGUudGV4dENvbnRlbnQgPSBGQUlMVVJFX01FU1NBR0UoeGhyLnN0YXR1cywgeGhyLnN0YXR1c1RleHQpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29kZS50ZXh0Q29udGVudCA9IEZBSUxVUkVfRU1QVFlfTUVTU0FHRTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHR4aHIuc2VuZChudWxsKTtcblx0XHR9XG5cdH0pO1xuXG5cdFByaXNtLnBsdWdpbnMuZmlsZUhpZ2hsaWdodCA9IHtcblx0XHQvKipcblx0XHQgKiBFeGVjdXRlcyB0aGUgRmlsZSBIaWdobGlnaHQgcGx1Z2luIGZvciBhbGwgbWF0Y2hpbmcgYHByZWAgZWxlbWVudHMgdW5kZXIgdGhlIGdpdmVuIGNvbnRhaW5lci5cblx0XHQgKlxuXHRcdCAqIE5vdGU6IEVsZW1lbnRzIHdoaWNoIGFyZSBhbHJlYWR5IGxvYWRlZCBvciBjdXJyZW50bHkgbG9hZGluZyB3aWxsIG5vdCBiZSB0b3VjaGVkIGJ5IHRoaXMgbWV0aG9kLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtQYXJlbnROb2RlfSBbY29udGFpbmVyPWRvY3VtZW50XVxuXHRcdCAqL1xuXHRcdGhpZ2hsaWdodDogZnVuY3Rpb24gaGlnaGxpZ2h0KGNvbnRhaW5lcikge1xuXHRcdFx0dmFyIGVsZW1lbnRzID0gKGNvbnRhaW5lciB8fCBkb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUik7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwLCBlbGVtZW50OyBlbGVtZW50ID0gZWxlbWVudHNbaSsrXTspIHtcblx0XHRcdFx0UHJpc20uaGlnaGxpZ2h0RWxlbWVudChlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0dmFyIGxvZ2dlZCA9IGZhbHNlO1xuXHQvKiogQGRlcHJlY2F0ZWQgVXNlIGBQcmlzbS5wbHVnaW5zLmZpbGVIaWdobGlnaHQuaGlnaGxpZ2h0YCBpbnN0ZWFkLiAqL1xuXHRQcmlzbS5maWxlSGlnaGxpZ2h0ID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICghbG9nZ2VkKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oJ1ByaXNtLmZpbGVIaWdobGlnaHQgaXMgZGVwcmVjYXRlZC4gVXNlIGBQcmlzbS5wbHVnaW5zLmZpbGVIaWdobGlnaHQuaGlnaGxpZ2h0YCBpbnN0ZWFkLicpO1xuXHRcdFx0bG9nZ2VkID0gdHJ1ZTtcblx0XHR9XG5cdFx0UHJpc20ucGx1Z2lucy5maWxlSGlnaGxpZ2h0LmhpZ2hsaWdodC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHR9XG5cbn0pKCk7XG4iLCJpbXBvcnQgcHJpc21qcyBmcm9tIFwicHJpc21qc1wiO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG5cdGNvbnN0IG1lbnVEYXRhID0ge1xuXHRcdGhlYWRlcjoge1xuXHRcdFx0dGhlbWU6ICd3ZWInLFxuXHRcdFx0YnJhbmQ6IHtcblx0XHRcdFx0bGFiZWw6ICdFc3JpIEdsb2JhbCBOYXZpZ2F0aW9uJyxcblx0XHRcdFx0YnJhbmRUZXh0OiAnR2xvYmFsIE5hdicsXG5cdFx0XHRcdGhyZWY6ICcuLydcblx0XHRcdH0sXG5cdFx0XHRtZW51czogW1xuXHRcdFx0XHRbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICdBcHAgTW9kZScsXG5cdFx0XHRcdFx0XHRocmVmOiAnLi9hcHAtbW9kZS1uYXYuaHRtbCdcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiAnV2ViIE1vZGUnLFxuXHRcdFx0XHRcdFx0aHJlZjogJ2VzcmktZ2xvYmFsLW5hdi5odG1sJ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XVxuXHRcdFx0XSxcblx0XHRcdHNlYXJjaDoge1xuXHRcdFx0XHRsYWJlbDogJ1NlYXJjaCcsXG5cdFx0XHRcdGlubGluZTogdHJ1ZSxcblx0XHRcdFx0ZGlhbG9nOiB7XG5cdFx0XHRcdFx0YWN0aW9uOiAnaHR0cHM6Ly9wYWdlcy5jb2RlaHViLmVzcmkuY29tL21hcmtldGluZy9lc3JpLXNlYXJjaC1wYWdlLycsXG5cdFx0XHRcdFx0bGFiZWw6ICdFc3JpJyxcblx0XHRcdFx0XHQnc3VibWl0TGFiZWwnOiAnU2VhcmNoJyxcblx0XHRcdFx0XHQnY2FuY2VsTGFiZWwnOiAnQ2FuY2VsJyxcblx0XHRcdFx0XHQncXVlcnlMYWJlbCc6ICdTZWFyY2ggRXNyaS5jb20nXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRhcHBzOiB7XG5cdFx0XHRcdGxhYmVsOiAnQXBwbGljYXRpb25zJyxcblx0XHRcdFx0ZGlzYWJsZURyYWdBbmREcm9wOiBmYWxzZSxcblx0XHRcdFx0ZGlzcGxheUludHJvOiB0cnVlLFxuXHRcdFx0XHRpZVZlcnNpb246IG51bGwsXG5cdFx0XHRcdHRleHQ6IHtcblx0XHRcdFx0XHRjbGVhcjogXCJDbGVhclwiLFxuXHRcdFx0XHRcdGNvbmZpcm06IFwiR290IGl0LlwiLFxuXHRcdFx0XHRcdGRyYWdBcHBzSGVyZTogXCJEcmFnIGFwcHMgaGVyZSB0aGF0IHlvdSBkb24ndCB1c2UgdmVyeSBvZnRlbi5cIixcblx0XHRcdFx0XHRpbnRybzogXCJEcmFnIGFuZCBkcm9wIHlvdXIgZmF2b3JpdGUgYXBwcyBpbiBhbnkgb3JkZXIgdG8gY3VzdG9taXplIHlvdXIgYXBwIGxhdW5jaGVyXCIsXG5cdFx0XHRcdFx0cmVtb3ZlZDogXCJUaGlzIGFwcCBpcyBubyBsb25nZXIgYXZhaWxhYmxlLlwiLFxuXHRcdFx0XHRcdHJlbW92ZWRNZXNzYWdlOiBcIlJlbW92ZWQgYXBwXCIsXG5cdFx0XHRcdFx0c2hvd01vcmU6IFwiU2hvdyBNb3JlXCJcblx0XHRcdFx0fSxcblx0XHRcdFx0cHJpbWFyeTogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGFiYnI6IFwiQVBQXCIsXG5cdFx0XHRcdFx0XHRpbWFnZTogXCJodHRwOi8vd3d3LmFyY2dpcy5jb20vaG9tZS9qcy9hcmNnaXNvbmxpbmUvc2hhcmluZy9kaWppdC9jc3MvaW1hZ2VzL2FwcC1pY29ucy9hcHBzdHVkaW8ucG5nXCIsXG5cdFx0XHRcdFx0XHRsYWJlbDogXCJBcHBTdHVkaW8gZm9yIEFyY0dJU1wiLFxuXHRcdFx0XHRcdFx0dXJsOiBcIi8vYXBwc3R1ZGlvZGV2LmFyY2dpcy5jb20vYXBwcy5odG1sXCIsXG5cdFx0XHRcdFx0XHRjYW5BY2Nlc3M6IHRydWUsXG5cdFx0XHRcdFx0XHRpdGVtSWQ6IFwiMTMxMDQ5NTgyMTkyXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGFiYnI6IFwiU3R1ZGlvXCIsXG5cdFx0XHRcdFx0XHRwbGFjZUhvbGRlckljb246IFwiaHR0cDovL3d3dy5hcmNnaXMuY29tL2hvbWUvanMvYXJjZ2lzb25saW5lL3NoYXJpbmcvZGlqaXQvY3NzL2ltYWdlcy9hcHAtaWNvbnMvc3ZnLWFwcC1pY29uLnN2Z1wiLFxuXHRcdFx0XHRcdFx0aW1hZ2U6IG51bGwsXG5cdFx0XHRcdFx0XHRsYWJlbDogXCJTdHVkaW8gZm9yIEFyY0dJU1wiLFxuXHRcdFx0XHRcdFx0dXJsOiBcIi8vYXBwc3R1ZGlvZGV2LmFyY2dpcy5jb20vYXBwcy5odG1sXCIsXG5cdFx0XHRcdFx0XHRjYW5BY2Nlc3M6IHRydWUsXG5cdFx0XHRcdFx0XHRpdGVtSWQ6IFwiMTMxMDQ5NTgyMTkzXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGFiYnI6IFwiVGVzdFwiLFxuXHRcdFx0XHRcdFx0cGxhY2VIb2xkZXJJY29uOiBcImh0dHA6Ly93d3cuYXJjZ2lzLmNvbS9ob21lL2pzL2FyY2dpc29ubGluZS9zaGFyaW5nL2Rpaml0L2Nzcy9pbWFnZXMvYXBwLWljb25zL3N2Zy1hcHAtY2lyY2xlLnN2Z1wiLFxuXHRcdFx0XHRcdFx0aW1hZ2U6IG51bGwsXG5cdFx0XHRcdFx0XHRsYWJlbDogXCJUZXN0IEFwcFwiLFxuXHRcdFx0XHRcdFx0dXJsOiBcIi8vYXBwc3R1ZGlvZGV2LmFyY2dpcy5jb20vYXBwcy5odG1sXCIsXG5cdFx0XHRcdFx0XHRjYW5BY2Nlc3M6IHRydWUsXG5cdFx0XHRcdFx0XHRpc05ldzogdHJ1ZSxcblx0XHRcdFx0XHRcdGl0ZW1JZDogXCIxMzEwNDk1ODIxOTRcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XSxcblx0XHRcdFx0c2Vjb25kYXJ5OiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YWJicjogXCJBUFBcIixcblx0XHRcdFx0XHRcdGltYWdlOiBcImh0dHA6Ly93d3cuYXJjZ2lzLmNvbS9ob21lL2pzL2FyY2dpc29ubGluZS9zaGFyaW5nL2Rpaml0L2Nzcy9pbWFnZXMvYXBwLWljb25zL2FwcHN0dWRpby5wbmdcIixcblx0XHRcdFx0XHRcdGxhYmVsOiBcIkFwcFN0dWRpbyBmb3IgQXJjR0lTXCIsXG5cdFx0XHRcdFx0XHR1cmw6IFwiLy9hcHBzdHVkaW9kZXYuYXJjZ2lzLmNvbS9hcHBzLmh0bWxcIixcblx0XHRcdFx0XHRcdGNhbkFjY2VzczogdHJ1ZSxcblx0XHRcdFx0XHRcdGl0ZW1JZDogXCIxMzEwNDk1ODIxOTVcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YWJicjogXCJTdHVkaW9cIixcblx0XHRcdFx0XHRcdHBsYWNlSG9sZGVySWNvbjogXCJodHRwOi8vd3d3LmFyY2dpcy5jb20vaG9tZS9qcy9hcmNnaXNvbmxpbmUvc2hhcmluZy9kaWppdC9jc3MvaW1hZ2VzL2FwcC1pY29ucy9zdmctYXBwLWljb24uc3ZnXCIsXG5cdFx0XHRcdFx0XHRpbWFnZTogbnVsbCxcblx0XHRcdFx0XHRcdGxhYmVsOiBcIlN0dWRpbyBmb3IgQXJjR0lTXCIsXG5cdFx0XHRcdFx0XHR1cmw6IFwiLy9hcHBzdHVkaW9kZXYuYXJjZ2lzLmNvbS9hcHBzLmh0bWxcIixcblx0XHRcdFx0XHRcdGNhbkFjY2VzczogZmFsc2UsXG5cdFx0XHRcdFx0XHRpdGVtSWQ6IFwiMTMxMDQ5NTgyMTk2XCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH0sXG5cdFx0XHRub3RpZmljYXRpb25zOiB7XG5cdFx0XHRcdGxhYmVsOiAnTm90aWZpY2F0aW9ucycsXG5cdFx0XHRcdGRpc21pc3NBbGxMYWJlbDogJ0Rpc21pc3MgYWxsJyxcblx0XHRcdFx0ZGlzbWlzc0xhYmVsOiAnRGlzbWlzcyBub3RpZmljYXRpb24nLFxuXHRcdFx0XHRjbGVhckFsbExhYmVsOiAnTWFyayBhbGwgYXMgcmVhZCcsXG5cdFx0XHRcdGVtcHR5TWVzc2FnZToge1xuXHRcdFx0XHRcdGltYWdlOiB7XG5cdFx0XHRcdFx0XHRwYXRoOiBbJ00xNS41IDFBMTQuNSAxNC41IDAgMSAwIDMwIDE1LjUgMTQuNSAxNC41IDAgMCAwIDE1LjUgMXptMCAyOC4xYTEzLjYgMTMuNiAwIDEgMSAxMy42LTEzLjYgMTMuNjE1IDEzLjYxNSAwIDAgMS0xMy42IDEzLjZ6TTguNTgxIDE3LjI3NmwuNjM3LS42MzYgMy4yODggMy4wOTggMTAuMDczLTkuOTIuNjM3LjYzNy0xMC43MSAxMC41NTZ6J10sXG5cdFx0XHRcdFx0XHR2aWV3Qm94OiAnMCAwIDMyIDMyJ1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0dGV4dDogXCJZb3UncmUgdXAgdG8gZGF0ZSFcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRtZXNzYWdlczogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHRleHQ6ICdZb3UgYWNjZXB0ZWQgdGhlIGludml0YXRpb24gdG8gam9pbiB0aGUgPGEgaHJlZj1cIiNcIj5CYXNlbWFwIEdhbGxlcnk8L2E+LicsXG5cdFx0XHRcdFx0XHRkYXRlOiAnWWVzdGVyZGF5Jyxcblx0XHRcdFx0XHRcdGlkOiAnMTMxMDQ5NTgyMTk0J1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dGV4dDogJ1lvdSB3ZXJlIGludml0ZWQgdG8gam9pbiB0aGUgPGEgaHJlZj1cIiNcIj5QdWJsaWMgQW5hbHlzaXMgZ3JvdXA8L2E+LicsXG5cdFx0XHRcdFx0XHRkYXRlOiAnMiBkYXlzIGFnbycsXG5cdFx0XHRcdFx0XHRpZDogJzEzMTA0OTU4MjE5Nydcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHRleHQ6ICdZb3UgYWNjZXB0ZWQgdGhlIGludml0YXRpb24gdG8gam9pbiB0aGUgPGEgaHJlZj1cIiNcIj5CYXNlbWFwIEdhbGxlcnk8L2E+LicsXG5cdFx0XHRcdFx0XHRkYXRlOiAnMyBkYXlzIGFnbycsXG5cdFx0XHRcdFx0XHRpZDogJzEzMTA0OTU4MjE5NCdcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHRleHQ6ICdZb3Ugd2VyZSBpbnZpdGVkIHRvIGpvaW4gdGhlIDxhIGhyZWY9XCIjXCI+UHVibGljIEFuYWx5c2lzIGdyb3VwPC9hPi4nLFxuXHRcdFx0XHRcdFx0ZGF0ZTogJzMgZGF5cyBhZ28nLFxuXHRcdFx0XHRcdFx0aWQ6ICcxMzEwNDk1ODIxOTcnXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0ZXh0OiAnWW91IGFjY2VwdGVkIHRoZSBpbnZpdGF0aW9uIHRvIGpvaW4gdGhlIDxhIGhyZWY9XCIjXCI+QmFzZW1hcCBHYWxsZXJ5PC9hPi4nLFxuXHRcdFx0XHRcdFx0ZGF0ZTogJzQgZGF5cyBhZ28nLFxuXHRcdFx0XHRcdFx0aWQ6ICcxMzEwNDk1ODIxOTQnXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0ZXh0OiAnWW91IHdlcmUgaW52aXRlZCB0byBqb2luIHRoZSA8YSBocmVmPVwiI1wiPlB1YmxpYyBBbmFseXNpcyBncm91cDwvYT4uJyxcblx0XHRcdFx0XHRcdGRhdGU6ICc1IGRheXMgYWdvJyxcblx0XHRcdFx0XHRcdGlkOiAnMTMxMDQ5NTgyMTk3J1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dGV4dDogJ1lvdSBhY2NlcHRlZCB0aGUgaW52aXRhdGlvbiB0byBqb2luIHRoZSA8YSBocmVmPVwiI1wiPkJhc2VtYXAgR2FsbGVyeTwvYT4uJyxcblx0XHRcdFx0XHRcdGRhdGU6ICc1IGRheXMgYWdvJyxcblx0XHRcdFx0XHRcdGlkOiAnMTMxMDQ5NTgyMTk0J1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dGV4dDogJ1lvdSB3ZXJlIGludml0ZWQgdG8gam9pbiB0aGUgPGEgaHJlZj1cIiNcIj5QdWJsaWMgQW5hbHlzaXMgZ3JvdXA8L2E+LicsXG5cdFx0XHRcdFx0XHRkYXRlOiAnMSB3ZWVrIGFnbycsXG5cdFx0XHRcdFx0XHRpZDogJzEzMTA0OTU4MjE5Nydcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHRleHQ6ICdZb3UgcmVxdWVzdGVkIHRvIGpvaW4gdGhlIDxhIGhyZWY9XCIjXCI+QmFzZW1hcCBHYWxsZXJ5PC9hPiBncm91cC4nLFxuXHRcdFx0XHRcdFx0ZGF0ZTogJzIgd2Vla3MgYWdvJyxcblx0XHRcdFx0XHRcdGlkOiAnMTMxMDQ5NTgyMTk5J1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XVxuXHRcdFx0fSxcblx0XHRcdGFjY291bnQ6IHtcblx0XHRcdFx0bGFiZWw6ICdBY2NvdW50IFByb2ZpbGUnLFxuXHRcdFx0XHRjb250cm9sczoge1xuXHRcdFx0XHRcdHNpZ25pbjogJ1NpZ24gSW4nLFxuXHRcdFx0XHRcdHNpZ25vdXQ6ICdTaWduIE91dCcsXG5cdFx0XHRcdFx0c3dpdGNoOiAnU3dpdGNoIEFjY291bnQnXG5cdFx0XHRcdH0sXG5cdFx0XHRcdG1lbnVzOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICdQcm9maWxlICYgU2V0dGluZ3MnLFxuXHRcdFx0XHRcdFx0aHJlZjogJyN1c2VyLW1lbnUtbGluay0xJ1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICdNeSBFc3JpJyxcblx0XHRcdFx0XHRcdGhyZWY6ICcjdXNlci1tZW51LWxpbmstMidcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiAnVHJhaW5pbmcnLFxuXHRcdFx0XHRcdFx0aHJlZjogJyN1c2VyLW1lbnUtbGluay0zJ1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICdDb21tdW5pdHkgJiBGb3J1bXMnLFxuXHRcdFx0XHRcdFx0aHJlZjogJyN1c2VyLW1lbnUtbGluay00J1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XSxcblx0XHRcdFx0dXNlcjoge1xuXHRcdFx0XHRcdG5hbWU6ICdDYXNzaWR5IEJpc2hvcCcsXG5cdFx0XHRcdFx0aWQ6ICdpYW1va3RhdGVzdGVyQGdtYWlsLmNvbScsXG5cdFx0XHRcdFx0Z3JvdXA6ICdSaXZlcnNpZGUgQ2l0eSBNZ210LicsXG5cdFx0XHRcdFx0aW1hZ2U6ICcvL3BsYWNlaG9sZC5pdC8zMDB4MzAwJ1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRmb290ZXI6IHtcblx0XHRcdGhpZGVNZW51czogZmFsc2UsXG5cdFx0XHRsYWJlbDogJ0VzcmknLFxuXHRcdFx0YnJhbmQ6IHtcblx0XHRcdFx0bGFiZWw6ICdFc3JpOiBUaGUgU2NpZW5jZSBvZiBXaGVyZScsXG5cdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9hYm91dC1lc3JpJyxcblx0XHRcdFx0dmlld0JveDogJzAgMCAxMTQgOTAnLFxuXHRcdFx0XHRwYXRoOiAnLi9pbWcvZ25hdi10c293LWZyYW1lLnN2Zydcblx0XHRcdH0sXG5cdFx0XHRtZW51OiB7XG5cdFx0XHRcdGxhYmVsOiAnRXNyaSBTaXRlcycsXG5cdFx0XHRcdG1lbnU6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ0FyY0dJUycsXG5cdFx0XHRcdFx0XHRtZW51OiBbXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogJ0Fib3V0IEFyY0dJUycsXG5cdFx0XHRcdFx0XHRcdFx0aHJlZjogJ2h0dHBzOi8vd3d3LmVzcmkuY29tL2FyY2dpcy9hYm91dC1hcmNnaXMnXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogJ0FyY0dJUyBQcm8nLFxuXHRcdFx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9lbi9hcmNnaXMvcHJvZHVjdHMvYXJjZ2lzLXByby9PdmVydmlldydcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiAnQXJjR0lTIEVudGVycHJpc2UnLFxuXHRcdFx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9lbi9hcmNnaXMvcHJvZHVjdHMvYXJjZ2lzLWVudGVycHJpc2UvT3ZlcnZpZXcnXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogJ0FyY0dJUyBPbmxpbmUnLFxuXHRcdFx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9zb2Z0d2FyZS9hcmNnaXMvYXJjZ2lzb25saW5lJ1xuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6ICdBcHBzJyxcblx0XHRcdFx0XHRcdFx0XHRocmVmOiAnaHR0cHM6Ly93d3cuZXNyaS5jb20vc29mdHdhcmUvYXBwcydcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiAnQXJjR0lTIGZvciBEZXZlbG9wZXJzJyxcblx0XHRcdFx0XHRcdFx0XHRocmVmOiAnaHR0cHM6Ly9kZXZlbG9wZXJzLmFyY2dpcy5jb20vJ1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ0NvbW11bml0eScsXG5cdFx0XHRcdFx0XHRtZW51OiBbXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogJ0VzcmkgQ29tbXVuaXR5IChHZW9OZXQpJyxcblx0XHRcdFx0XHRcdFx0XHRocmVmOiAnaHR0cHM6Ly9nZW9uZXQuZXNyaS5jb20vJ1xuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6ICdBcmNHSVMgQmxvZycsXG5cdFx0XHRcdFx0XHRcdFx0aHJlZjogJ2h0dHBzOi8vYmxvZ3MuZXNyaS5jb20vZXNyaS9hcmNnaXMnXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogJ0Vhcmx5IEFkb3B0ZXIgQ29tbXVuaXR5Jyxcblx0XHRcdFx0XHRcdFx0XHRocmVmOiAnaHR0cHM6Ly93d3cuZXNyaS5jb20vZWFybHktYWRvcHRlci1jb21tdW5pdHknXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogJ0V2ZW50cycsXG5cdFx0XHRcdFx0XHRcdFx0aHJlZjogJ2h0dHBzOi8vd3d3LmVzcmkuY29tL2V2ZW50cydcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICdVbmRlcnN0YW5kaW5nIEdJUycsXG5cdFx0XHRcdFx0XHRtZW51OiBbXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogJ1doYXQgaXMgR0lTPycsXG5cdFx0XHRcdFx0XHRcdFx0aHJlZjogJ2h0dHBzOi8vd3d3LmVzcmkuY29tL3doYXQtaXMtZ2lzJ1xuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6ICdUcmFpbmluZycsXG5cdFx0XHRcdFx0XHRcdFx0aHJlZjogJ2h0dHBzOi8vd3d3LmVzcmkuY29tL3RyYWluaW5nJ1xuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6ICdNYXBzIFdlIExvdmUnLFxuXHRcdFx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9wcm9kdWN0cy9tYXBzLXdlLWxvdmUnXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogJ0Jsb2cnLFxuXHRcdFx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9hYm91dC9uZXdzcm9vbS9ibG9nJ1xuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6ICdXaGVyZU5leHQgTWFnYXppbmUnLFxuXHRcdFx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9hYm91dC9uZXdzcm9vbS9wdWJsaWNhdGlvbnMvd2hlcmVuZXh0Lydcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiAnTGVhcm4gQXJjR0lTJyxcblx0XHRcdFx0XHRcdFx0XHRocmVmOiAnaHR0cHM6Ly9sZWFybi5hcmNnaXMuY29tL2VuLydcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICdDb21wYW55Jyxcblx0XHRcdFx0XHRcdG1lbnU6IFtcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiAnQWJvdXQgRXNyaScsXG5cdFx0XHRcdFx0XHRcdFx0aHJlZjogJ2h0dHBzOi8vd3d3LmVzcmkuY29tL2Fib3V0LWVzcmknXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogJ0NvbnRhY3QgVXMnLFxuXHRcdFx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9hYm91dC1lc3JpL2NvbnRhY3QnXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogJ0VzcmkgT2ZmaWNlcyBXb3JsZHdpZGUnLFxuXHRcdFx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9hYm91dC1lc3JpL2NvbnRhY3QjaW50ZXJuYXRpb25hbCdcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiAnQ2FyZWVycycsXG5cdFx0XHRcdFx0XHRcdFx0aHJlZjogJ2h0dHBzOi8vd3d3LmVzcmkuY29tL2NhcmVlcnMnXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogJ09wZW4gVmlzaW9uJyxcblx0XHRcdFx0XHRcdFx0XHRocmVmOiAnaHR0cHM6Ly93d3cuZXNyaS5jb20vc29mdHdhcmUvb3Blbidcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiAnUGFydG5lcnMnLFxuXHRcdFx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9wYXJ0bmVycydcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICdTcGVjaWFsIHByb2dyYW1zJyxcblx0XHRcdFx0XHRcdG1lbnU6IFtcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiAnQ29uc2VydmF0aW9uJyxcblx0XHRcdFx0XHRcdFx0XHRocmVmOiAnaHR0cHM6Ly93d3cuZXNyaS5jb20vZXNyaS1jb25zZXJ2YXRpb24tcHJvZ3JhbSdcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiAnRGlzYXN0ZXIgUmVzcG9uc2UnLFxuXHRcdFx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9zZXJ2aWNlcy9kaXNhc3Rlci1yZXNwb25zZSdcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiAnRWR1Y2F0aW9uJyxcblx0XHRcdFx0XHRcdFx0XHRocmVmOiAnaHR0cHM6Ly93d3cuZXNyaS5jb20vaW5kdXN0cmllcy9lZHVjYXRpb24nXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogJ05vbnByb2ZpdCcsXG5cdFx0XHRcdFx0XHRcdFx0aHJlZjogJ2h0dHBzOi8vd3d3LmVzcmkuY29tL25vbnByb2ZpdCdcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiAnVVMgTmF2eSBTZWFQb3J0LWUgSW5mb3JtYXRpb24nLFxuXHRcdFx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9sYW5kaW5nLXBhZ2VzL3NlYXBvcnQnXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH0sXG5cdFx0XHRzb2NpYWw6IHtcblx0XHRcdFx0bGFiZWw6ICdTb2NpYWwgTWVkaWEnLFxuXHRcdFx0XHRtZW51OiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICdGYWNlYm9vaycsXG5cdFx0XHRcdFx0XHRwbGF0Zm9ybTogJ2ZhY2Vib29rJyxcblx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5mYWNlYm9vay5jb20vZXNyaWdpcycsXG5cdFx0XHRcdFx0XHRpbWFnZToge1xuXHRcdFx0XHRcdFx0XHR2aWV3Qm94OiAnMCAwIDM4IDM4Jyxcblx0XHRcdFx0XHRcdFx0cGF0aDogWydNMzggMzhWMEgwdjM4aDE3LjJWMjEuOUgxNHYtNS43aDMuMnYtMy43YzAtMi42IDEuMi02LjcgNi43LTYuN2g0Ljl2NS41aC0zLjZjLS42IDAtMS40LjMtMS40IDEuNXYzLjNoNS4xbC0uNiA1LjdoLTQuNXYxNi4xSDM4eiddXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ1R3aXR0ZXInLFxuXHRcdFx0XHRcdFx0cGxhdGZvcm06ICd0d2l0dGVyJyxcblx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3R3aXR0ZXIuY29tL0VzcmknLFxuXHRcdFx0XHRcdFx0aW1hZ2U6IHtcblx0XHRcdFx0XHRcdFx0dmlld0JveDogJzAgMCA1MTIgNTEyJyxcblx0XHRcdFx0XHRcdFx0cGF0aDogWydNNTEyLjAwMiA5Ny4yMTFjLTE4Ljg0IDguMzU0LTM5LjA4MiAxNC4wMDEtNjAuMzMgMTYuNTQgMjEuNjg2LTEzIDM4LjM0Mi0zMy41ODUgNDYuMTg2LTU4LjExNWEyMTAuMjkgMjEwLjI5IDAgMCAxLTY2LjcwNSAyNS40OWMtMTkuMTYtMjAuNDE1LTQ2LjQ2MS0zMy4xNy03Ni42NzQtMzMuMTctNTguMDExIDAtMTA1LjA0MiA0Ny4wMjktMTA1LjA0MiAxMDUuMDM5IDAgOC4yMzMuOTI5IDE2LjI1IDIuNzIgMjMuOTM5LTg3LjMtNC4zODItMTY0LjcwMS00Ni4yLTIxNi41MDktMTA5Ljc1My05LjA0MiAxNS41MTQtMTQuMjIzIDMzLjU1OC0xNC4yMjMgNTIuODA5IDAgMzYuNDQ0IDE4LjU0NCA2OC41OTYgNDYuNzMgODcuNDMzYTEwNC42MTQgMTA0LjYxNCAwIDAgMS00Ny41NzctMTMuMTM5Yy0uMDEuNDM4LS4wMS44NzgtLjAxIDEuMzIxIDAgNTAuODk0IDM2LjIwOSA5My4zNDggODQuMjYxIDEwM2ExMDUuMjQ1IDEwNS4yNDUgMCAwIDEtMjcuNjc0IDMuNjg3Yy02Ljc2OSAwLTEzLjM0OS0uNjYtMTkuNzY0LTEuODg4IDEzLjM2OCA0MS43MyA1Mi4xNiA3Mi4xMDQgOTguMTI2IDcyLjk0OS0zNS45NSAyOC4xNzYtODEuMjQzIDQ0Ljk2Ny0xMzAuNDU4IDQ0Ljk2Ny04LjQ3OSAwLTE2Ljg0LS40OTYtMjUuMDU4LTEuNDcxIDQ2LjQ4NiAyOS44MDcgMTAxLjcwMSA0Ny4xOTcgMTYxLjAyMSA0Ny4xOTcgMTkzLjIxMSAwIDI5OC44NjgtMTYwLjA2MiAyOTguODY4LTI5OC44NzIgMC00LjU1NC0uMTA0LTkuMDg0LS4zMDUtMTMuNTkgMjAuNTI2LTE0LjgwOSAzOC4zMzUtMzMuMzA5IDUyLjQxNy01NC4zNzN6J11cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiAnTGlua2VkSW4nLFxuXHRcdFx0XHRcdFx0cGxhdGZvcm06ICdsaW5rZWRpbicsXG5cdFx0XHRcdFx0XHRocmVmOiAnaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvZXNyaScsXG5cdFx0XHRcdFx0XHRpbWFnZToge1xuXHRcdFx0XHRcdFx0XHR2aWV3Qm94OiAnMCAwIDI0IDI0Jyxcblx0XHRcdFx0XHRcdFx0cGF0aDogWydNMCAwdjI0aDI0VjB6bTggMTlINVY4aDN6TTYuNSA2LjdBMS44IDEuOCAwIDEgMSA4LjMgNWExLjggMS44IDAgMCAxLTEuOCAxLjd6TTIwIDE5aC0zdi01LjZjMC0zLjQtNC0zLjEtNCAwVjE5aC0zVjhoM3YxLjhjMS40LTIuNiA3LTIuOCA3IDIuNXonXVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICdJbnN0YWdyYW0nLFxuXHRcdFx0XHRcdFx0cGxhdGZvcm06ICdpbnN0YWdyYW0nLFxuXHRcdFx0XHRcdFx0aHJlZjogJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vZXNyaWdyYW0vJyxcblx0XHRcdFx0XHRcdGltYWdlOiB7XG5cdFx0XHRcdFx0XHRcdHZpZXdCb3g6ICcwIDAgMzAgMzAnLFxuXHRcdFx0XHRcdFx0XHRwYXRoOiBbJ00yOS45MSA4LjgxNWMtLjA3My0xLjU5Ni0uMzI3LTIuNjg2LS42OTctMy42NGE3LjM1NCA3LjM1NCAwIDAgMC0xLjczLTIuNjU3IDcuMzUyIDcuMzUyIDAgMCAwLTIuNjU3LTEuNzNDMjMuODcuNDE2IDIyLjc4LjE2MiAyMS4xODQuMDkgMTkuNTg0LjAxNyAxOS4wNzQgMCAxNSAwcy00LjU4NS4wMTctNi4xODQuMDlDNy4yMTkuMTYzIDYuMTI5LjQxNyA1LjE3NC43ODdhNy4zNTIgNy4zNTIgMCAwIDAtMi42NTYgMS43MyA3LjM1NCA3LjM1NCAwIDAgMC0xLjczIDIuNjU3Qy40MTYgNi4xMy4xNjIgNy4yMi4wOSA4LjgxNS4wMTcgMTAuNDE1IDAgMTAuOTI2IDAgMTVzLjAxNyA0LjU4NS4wOSA2LjE4NGMuMDczIDEuNTk3LjMyNyAyLjY4Ny42OTcgMy42NDJhNy4zNTMgNy4zNTMgMCAwIDAgMS43MyAyLjY1NiA3LjM1MyA3LjM1MyAwIDAgMCAyLjY1NyAxLjczYy45NTUuMzcxIDIuMDQ1LjYyNSAzLjY0Mi42OTggMS42LjA3MyAyLjExLjA5IDYuMTg0LjA5czQuNTg1LS4wMTcgNi4xODQtLjA5YzEuNTk3LS4wNzMgMi42ODctLjMyNyAzLjY0Mi0uNjk3YTcuMzUzIDcuMzUzIDAgMCAwIDIuNjU2LTEuNzMgNy4zNTMgNy4zNTMgMCAwIDAgMS43My0yLjY1N2MuMzcxLS45NTUuNjI1LTIuMDQ1LjY5OC0zLjY0Mi4wNzMtMS42LjA5LTIuMTEuMDktNi4xODRzLS4wMTctNC41ODUtLjA5LTYuMTg1em0tMi45OTcgMTIuMjMyYy0uMDY0IDEuNDEyLS4yODcgMi4xNTMtLjQ5NiAyLjY5MWE0LjM3NiA0LjM3NiAwIDAgMS0xLjA1NiAxLjYyMyA0LjM3MSA0LjM3MSAwIDAgMS0xLjYyMiAxLjA1NWMtLjUzOS4yMS0xLjI4LjQzMy0yLjY5MS40OTctMS41NzMuMDcyLTIuMDQ1LjA4Ny02LjA0OC4wODdzLTQuNDc1LS4wMTUtNi4wNDctLjA4N2MtMS40MTItLjA2NC0yLjE1My0uMjg3LTIuNjkxLS40OTZhNC4zNzYgNC4zNzYgMCAwIDEtMS42MjMtMS4wNTYgNC4zNzEgNC4zNzEgMCAwIDEtMS4wNTUtMS42MjJjLS4yMS0uNTM5LS40MzMtMS4yOC0uNDk3LTIuNjkxQzMuMDE1IDE5LjQ3NSAzIDE5LjAwMyAzIDE1cy4wMTUtNC40NzUuMDg3LTYuMDQ3Yy4wNjQtMS40MTIuMjg3LTIuMTUzLjQ5Ni0yLjY5MWE0LjM4IDQuMzggMCAwIDEgMS4wNTYtMS42MjNBNC4zNzEgNC4zNzEgMCAwIDEgNi4yNiAzLjU4NGMuNTM5LS4yMSAxLjI4LS40MzMgMi42OTEtLjQ5N0MxMC41MjUgMy4wMTUgMTAuOTk3IDMgMTUgM3M0LjQ3NS4wMTUgNi4wNDcuMDg3YzEuNDEyLjA2NCAyLjE1My4yODcgMi42OTEuNDk2YTQuMzggNC4zOCAwIDAgMSAxLjYyMyAxLjA1NmMuNDkzLjQ5My44Ljk2MyAxLjA1NSAxLjYyMi4yMS41MzkuNDMzIDEuMjguNDk3IDIuNjkxLjA3MiAxLjU3My4wODcgMi4wNDUuMDg3IDYuMDQ4cy0uMDE1IDQuNDc1LS4wODcgNi4wNDd6TTE1IDcuMTc1YTcuODI1IDcuODI1IDAgMSAwIDAgMTUuNjUgNy44MjUgNy44MjUgMCAwIDAgMC0xNS42NXptMCAxMi42NWMtMi42NiAwLTQuODI1LTIuMTY0LTQuODI1LTQuODI1czIuMTY0LTQuODI1IDQuODI1LTQuODI1IDQuODI1IDIuMTY0IDQuODI1IDQuODI1LTIuMTY0IDQuODI1LTQuODI1IDQuODI1em02LjAwNy0xMi44MzJhMiAyIDAgMSAwIDQgMCAyIDIgMCAxIDAtNCAwJ11cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiAnWW91VHViZScsXG5cdFx0XHRcdFx0XHRwbGF0Zm9ybTogJ3lvdXR1YmUnLFxuXHRcdFx0XHRcdFx0aHJlZjogJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvZXNyaXR2Jyxcblx0XHRcdFx0XHRcdGltYWdlOiB7XG5cdFx0XHRcdFx0XHRcdHZpZXdCb3g6ICcwIDAgMzEwIDMxMCcsXG5cdFx0XHRcdFx0XHRcdHBhdGg6IFsnTTI5Ny45MTcgNjQuNjQ1Yy0xMS4xOS0xMy4zMDItMzEuODUtMTguNzI4LTcxLjMwNi0xOC43MjhIODMuMzg2Yy00MC4zNTkgMC02MS4zNjkgNS43NzYtNzIuNTE3IDE5LjkzOEMwIDc5LjY2MyAwIDEwMC4wMDggMCAxMjguMTY2djUzLjY2OWMwIDU0LjU1MSAxMi44OTYgODIuMjQ4IDgzLjM4NiA4Mi4yNDhoMTQzLjIyNmMzNC4yMTYgMCA1My4xNzYtNC43ODggNjUuNDQyLTE2LjUyN0MzMDQuNjMzIDIzNS41MTggMzEwIDIxNS44NjMgMzEwIDE4MS44MzV2LTUzLjY2OWMwLTI5LjY5NS0uODQxLTUwLjE2LTEyLjA4My02My41MjF6bS05OC44OTYgOTcuNzY1bC02NS4wMzggMzMuOTkxYTkuOTk3IDkuOTk3IDAgMCAxLTE0LjYzMi04Ljg2M3YtNjcuNzY0YTEwIDEwIDAgMCAxIDE0LjYwOS04Ljg3NGw2NS4wMzggMzMuNzcyYTEwIDEwIDAgMCAxIC4wMjMgMTcuNzM4eiddXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ0dlb05ldCcsXG5cdFx0XHRcdFx0XHRwbGF0Zm9ybTogJ2dlb25ldCcsXG5cdFx0XHRcdFx0XHRocmVmOiAnaHR0cHM6Ly9nZW9uZXQuZXNyaS5jb20vJyxcblx0XHRcdFx0XHRcdGltYWdlOiB7XG5cdFx0XHRcdFx0XHRcdHZpZXdCb3g6ICc3IDcgMTYgMTYnLFxuXHRcdFx0XHRcdFx0XHRwYXRoOiBbJ00yMyAxOWgtM3Y0bC00LTRIN1Y5aDE2eiddXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHR9LFxuXHRcdFx0aW5mbzoge1xuXHRcdFx0XHRsYWJlbDogJ0FkZGl0aW9uYWwgTGlua3MnLFxuXHRcdFx0XHRtZW51OiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICdQcml2YWN5Jyxcblx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9sZWdhbC9wcml2YWN5J1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICdMZWdhbCcsXG5cdFx0XHRcdFx0XHRocmVmOiAnaHR0cHM6Ly93d3cuZXNyaS5jb20vbGVnYWwnXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ1NpdGUgTWFwJyxcblx0XHRcdFx0XHRcdGhyZWY6ICdodHRwOi8vd3d3LmVzcmkuY29tL3NpdGUtbWFwJ1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICdUZXJtcyBhbmQgQ29uZGl0aW9ucycsXG5cdFx0XHRcdFx0XHRocmVmOiAnaHR0cHM6Ly93d3cuZXNyaS5jb20vbGVnYWwvc29mdHdhcmUtbGljZW5zZSdcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiAnQ29kZSBvZiBCdXNpbmVzcyBDb25kdWN0Jyxcblx0XHRcdFx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5lc3JpLmNvbS9hYm91dC1lc3JpL2NvZGUtb2YtY29uZHVjdCdcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH0sXG5cdFx0XHRsYW5ndWFnZToge1xuXHRcdFx0XHRsYWJlbDogJ1N3aXRjaCBMYW5ndWFnZXMnLFxuXHRcdFx0XHRidXR0b25MYWJlbDogJ1VuaXRlZCBTdGF0ZXMgKEVuZ2xpc2gpJyxcblx0XHRcdFx0c3VibWl0TGFiZWw6ICdDaGFuZ2UnLFxuXHRcdFx0XHRncmVldGluZ0xhYmVsOiAnSGVsbG8hJyxcblx0XHRcdFx0bWVzc2FnZUxhYmVsOiAnWW91IGFyZSBzZWVpbmcgdGhlIEVuZ2xpc2ggcGFnZS4gSXMgdGhpcyBjb3JyZWN0PycsXG5cdFx0XHRcdGNsb3NlTGFiZWw6ICdDbG9zZSBOYXZpZ2F0aW9uJyxcblx0XHRcdFx0b3B0aW9uc0xhYmVsOiAnRGVzaXJlZCBMYW5ndWFnZScsXG5cdFx0XHRcdG9wdGlvbnM6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ0VuZ2xpc2gnLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICcjdGhlLWVuZ2xpc2gtcGFnZSdcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiAnRnJlbmNoJyxcblx0XHRcdFx0XHRcdHZhbHVlOiAnI3RoZS1mcmVuY2gtcGFnZSdcblx0XHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ1NwYW5pc2gnLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICcjdGhlLXNwYW5pc2gtcGFnZSdcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0ZXNyaUdsb2JhbE5hdi5jcmVhdGUoe2hlYWRlckVsbTogJy5lc3JpLWhlYWRlci1iYXJyaWVyJywgZm9vdGVyRWxtOiAnLmVzcmktZm9vdGVyLWJhcnJpZXInLCBtZW51RGF0YX0pO1xufSk7XG4iXSwibmFtZXMiOlsiX3NlbGYiLCJ3aW5kb3ciLCJXb3JrZXJHbG9iYWxTY29wZSIsInNlbGYiLCJQcmlzbSIsImxhbmciLCJ1bmlxdWVJZCIsIl8iLCJtYW51YWwiLCJkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXIiLCJlbmNvZGUiLCJ0b2tlbnMiLCJUb2tlbiIsInR5cGUiLCJjb250ZW50IiwiYWxpYXMiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJyZXBsYWNlIiwibyIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwib2JqIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImRlZXBDbG9uZSIsInZpc2l0ZWQiLCJjbG9uZSIsImlkIiwidXRpbCIsIm9iaklkIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJmb3JFYWNoIiwidiIsImkiLCJlbGVtZW50IiwidGVzdCIsImNsYXNzTmFtZSIsInBhcmVudEVsZW1lbnQiLCJtYXRjaCIsInRvTG93ZXJDYXNlIiwiZG9jdW1lbnQiLCJjdXJyZW50U2NyaXB0IiwiRXJyb3IiLCJlcnIiLCJzcmMiLCJleGVjIiwic3RhY2siLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJkZWZhdWx0QWN0aXZhdGlvbiIsIm5vIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJyZWRlZiIsImxhbmd1YWdlcyIsImluc2lkZSIsImJlZm9yZSIsImluc2VydCIsInJvb3QiLCJncmFtbWFyIiwicmV0IiwidG9rZW4iLCJuZXdUb2tlbiIsIm9sZCIsIkRGUyIsImNhbGxiYWNrIiwicHJvcGVydHkiLCJwcm9wZXJ0eVR5cGUiLCJhc3luYyIsImhpZ2hsaWdodEFsbFVuZGVyIiwiY29udGFpbmVyIiwiZW52IiwiaG9va3MiLCJydW4iLCJlbGVtZW50cyIsImFwcGx5IiwicXVlcnlTZWxlY3RvckFsbCIsInNlbGVjdG9yIiwiaGlnaGxpZ2h0RWxlbWVudCIsImxhbmd1YWdlIiwiZ2V0TGFuZ3VhZ2UiLCJwYXJlbnQiLCJub2RlTmFtZSIsImNvZGUiLCJ0ZXh0Q29udGVudCIsImluc2VydEhpZ2hsaWdodGVkQ29kZSIsImhpZ2hsaWdodGVkQ29kZSIsImlubmVySFRNTCIsIldvcmtlciIsIndvcmtlciIsImZpbGVuYW1lIiwib25tZXNzYWdlIiwiZXZ0IiwiZGF0YSIsInBvc3RNZXNzYWdlIiwiSlNPTiIsInN0cmluZ2lmeSIsImhpZ2hsaWdodCIsInRleHQiLCJ0b2tlbml6ZSIsInJlc3QiLCJ0b2tlbkxpc3QiLCJMaW5rZWRMaXN0IiwiaGVhZCIsInRvQXJyYXkiLCJuYW1lIiwiYWxsIiwicHVzaCIsImNhbGxiYWNrcyIsImxlbmd0aCIsIm1hdGNoZWRTdHIiLCJzIiwiZSIsImFsaWFzZXMiLCJjbGFzc2VzIiwiYXR0cmlidXRlcyIsInRhZyIsImpvaW4iLCJtYXRjaEdyYW1tYXIiLCJzdGFydE5vZGUiLCJzdGFydFBvcyIsInJlbWF0Y2giLCJwYXR0ZXJucyIsImoiLCJjYXVzZSIsInBhdHRlcm5PYmoiLCJsb29rYmVoaW5kIiwiZ3JlZWR5IiwibG9va2JlaGluZExlbmd0aCIsInBhdHRlcm4iLCJnbG9iYWwiLCJmbGFncyIsIlJlZ0V4cCIsInNvdXJjZSIsImN1cnJlbnROb2RlIiwibmV4dCIsInBvcyIsInRhaWwiLCJyZWFjaCIsInN0ciIsInJlbW92ZUNvdW50IiwicHJldiIsImxhc3RJbmRleCIsImZyb20iLCJpbmRleCIsInRvIiwicCIsImsiLCJtYXRjaFN0ciIsImFmdGVyIiwicmVtb3ZlRnJvbSIsImFkZEFmdGVyIiwid3JhcHBlZCIsImxpc3QiLCJub2RlIiwibmV3Tm9kZSIsInJlbW92ZVJhbmdlIiwiY291bnQiLCJhcnJheSIsImFkZEV2ZW50TGlzdGVuZXIiLCJtZXNzYWdlIiwicGFyc2UiLCJpbW1lZGlhdGVDbG9zZSIsImNsb3NlIiwic2NyaXB0IiwiaGFzQXR0cmlidXRlIiwiaGlnaGxpZ2h0QXV0b21hdGljYWxseUNhbGxiYWNrIiwiaGlnaGxpZ2h0QWxsIiwicmVhZHlTdGF0ZSIsImRlZmVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsIm1vZHVsZSIsImV4cG9ydHMiLCJtYXJrdXAiLCJhZGQiLCJhZGRJbmxpbmVkIiwidGFnTmFtZSIsImluY2x1ZGVkQ2RhdGFJbnNpZGUiLCJkZWYiLCJpbnNlcnRCZWZvcmUiLCJodG1sIiwibWF0aG1sIiwic3ZnIiwieG1sIiwiZXh0ZW5kIiwic3NtbCIsImF0b20iLCJyc3MiLCJzdHJpbmciLCJjc3MiLCJjbGlrZSIsImphdmFzY3JpcHQiLCJqcyIsIkxPQURJTkdfTUVTU0FHRSIsIkZBSUxVUkVfTUVTU0FHRSIsInN0YXR1cyIsIkZBSUxVUkVfRU1QVFlfTUVTU0FHRSIsIkVYVEVOU0lPTlMiLCJTVEFUVVNfQVRUUiIsIlNUQVRVU19MT0FESU5HIiwiU1RBVFVTX0xPQURFRCIsIlNUQVRVU19GQUlMRUQiLCJTRUxFQ1RPUiIsInNldExhbmd1YWdlQ2xhc3MiLCJ0cmltIiwicHJlIiwibWF0Y2hlcyIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlRWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImV4dGVuc2lvbiIsImF1dG9sb2FkZXIiLCJwbHVnaW5zIiwibG9hZExhbmd1YWdlcyIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJzZW5kIiwiZmlsZUhpZ2hsaWdodCIsImxvZ2dlZCIsIndhcm4iLCJhcmd1bWVudHMiLCJtZW51RGF0YSIsImNyZWF0ZSIsImhlYWRlckVsbSIsImZvb3RlckVsbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FPSUEsUUFBUyxPQUFPQyxNQUFQ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"}